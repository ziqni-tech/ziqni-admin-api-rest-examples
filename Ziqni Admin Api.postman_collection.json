{
	"info": {
		"_postman_id": "5bd0bade-8862-4091-80e3-f8f419977366",
		"name": "ZIQNI Admin Api - Gamification back-office Copy",
		"description": "```\nCopyright (c) 2022. ZIQNI LTD registered in England and Wales, company registration number-09693684\n```\n\nGamification done right for your business and customers.\nZIQNI Admin Api Services are used to manage your ZIQNI project, tournaments servers, missions, achievements and all other features offered by the platform.\nContact Support:\nName: Support Team\nEmail: support@ziqni.com\n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "account-messages",
			"item": [
				{
					"name": "Get account messages",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/account-messages?id={{accountMessageId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"account-messages"
							],
							"query": [
								{
									"key": "id",
									"value": "{{accountMessageId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Account Messages."
					},
					"response": []
				},
				{
					"name": "Get account messages by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{accountMessageId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/account-messages/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"account-messages",
								"query"
							]
						},
						"description": "Retrieve Account Messages from the system by query."
					},
					"response": []
				},
				{
					"name": "Delete account messages",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/account-messages?id={{accountMessageId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"account-messages"
							],
							"query": [
								{
									"key": "id",
									"value": "{{accountMessageId0}}"
								}
							]
						},
						"description": "Delete Account Messages for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete account messages by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{accountMessageId0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/account-messages/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"account-messages",
								"delete"
							]
						},
						"description": "Delete Account Messages from the system by query."
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/account-messages/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"account-messages",
								"state"
							]
						},
						"description": "Update the Account Message status"
					},
					"response": []
				}
			]
		},
		{
			"name": "achievements",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"achievements",
										":id",
										"issued"
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Receive a count of Issued Achievements by identifier provided"
							},
							"response": [
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Issued Achievements for the id requested",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/issued",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"issued"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"achievements",
										":id",
										"members"
									],
									"query": [
										{
											"key": "memberId",
											"value": "repr",
											"description": "Id of a member"
										},
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Receive a list of members that had an Achievement issued for the Achievement identified provided"
							},
							"response": [
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A count of Achievement issued for for each member",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/members?memberId=repr&_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"members"
											],
											"query": [
												{
													"key": "memberId",
													"value": "repr"
												},
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"achievements",
										":id",
										"antecedents"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Receive a list of Antecedent Achievements for the Achievement identified provided"
							},
							"response": [
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/antecedents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"antecedents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"achievements",
										":id",
										"descendents"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Receive a list of Descendent Achievements for the Achievement identified provided"
							},
							"response": [
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of achievements and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/descendents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"descendents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"achievements",
										":id",
										"clone"
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Clones an Achievement for the identifier provided"
							},
							"response": [
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of an Achievement that can be used for Achievement creation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/achievements/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"achievements",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "create Achievements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"achievementName\".concat([i]), requestJson[i].name);",
									"    // set the action type key",
									"    // pm.collectionVariables.set(\"actionTypeKey\".concat([i]), requestJson[i].key);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the action type id",
									"    pm.collectionVariables.set(\"achievementId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"79bb9d39-8cf8-4736-815d-e07279bcf8b8\": \"0bc3f0e7-bef9-439e-80ce-6e7b54d983aa\"\n        },\n        \"name\": \"Test_name-f7925160-807d-4cd1-8571-a8289f56eb70\",\n        \"description\": \"test description\",\n        \"termsAndConditions\": \"test terms and conditions\",\n        \"icon\": null,\n        \"rules\": [\n            {\n                \"entityId\": null,\n                \"action\": \"Test Action\",\n                \"context\": \"Test Context\",\n                \"rules\": {\n                    \"type\": \"expression\",\n                    \"mustMatchAll\": true,\n                    \"mustEvaluateTo\": true,\n                    \"scope\": \"Scope\",\n                    \"operand\": \"Operand\",\n                    \"operator\": \"Operator\",\n                    \"value\": null,\n                    \"rules\": null,\n                    \"then\": null,\n                    \"lineNumber\": 1\n                },\n                \"id\": null,\n                \"entityType\": null\n            }\n        ],\n        \"achievementDependencies\": {\n            \"must\": [\"38Gs0H8BVp8Gz4wlXNq5\"],\n            \"mustNot\": [],\n            \"should\": [],\n            \"shouldMatchAtLeast\": 0\n        },\n        \"memberTagsFilter\": {\n            \"must\": null,\n            \"mustNot\": null,\n            \"should\": [\n                \"{{tagKey0}}\"\n            ],\n            \"shouldMatchAtLeast\": 0\n        },\n        \"scheduling\": {\n            \"scheduleType\": \"Once\",\n            \"scheduleOccurrencesLimit\": 1,\n            \"every\": [],\n            \"startDate\": \"2022-03-28T15:17:11.893+02:00\",\n            \"endDate\": \"2022-04-28T15:17:11.893+02:00\",\n            \"constraints\": [\n                \"onlyAggregateOnActiveDays\"\n            ]\n        },\n        \"maxNumberOfIssues\": 3,\n        \"translations\": null,\n        \"rewards\": [\n            {\n                \"customFields\": null,\n                \"tags\": null,\n                \"metadata\": null,\n                \"name\": \"Given Pfunguro\",\n                \"description\": \"Test_description\",\n                \"rewardRank\": \"1,2,3,4-10\",\n                \"rewardValue\": 0.10758983118804344,\n                \"icon\": null,\n                \"issueLimit\": null,\n                \"delay\": 100,\n                \"pointInTime\": null,\n                \"period\": 100,\n                \"translations\": null,\n                \"addConstraints\": [],\n                \"rewardTypeId\": \"28Gs0H8BVp8Gz4wlN9oO\"\n            }\n        ],\n        \"constraints\": [\n            \"initialState\",\n            \"memberAcknowledgmentRequired\"\n        ]\n    },\n    {\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"79bb9d39-8cf8-4736-815d-e07279bcf8b8\": \"0bc3f0e7-bef9-439e-80ce-6e7b54d983aa\"\n        },\n        \"name\": \"Test_name-2\",\n        \"description\": \"test description 2\",\n        \"termsAndConditions\": \"test terms and conditions\",\n        \"icon\": null,\n        \"rules\": [\n            {\n                \"entityId\": null,\n                \"action\": \"Test Action\",\n                \"context\": \"Test Context\",\n                \"rules\": {\n                    \"type\": \"expression\",\n                    \"mustMatchAll\": true,\n                    \"mustEvaluateTo\": true,\n                    \"scope\": \"Scope\",\n                    \"operand\": \"Operand\",\n                    \"operator\": \"Operator\",\n                    \"value\": null,\n                    \"rules\": null,\n                    \"then\": null,\n                    \"lineNumber\": 1\n                },\n                \"id\": null,\n                \"entityType\": null\n            }\n        ],\n        \"achievementDependencies\": {\n            \"must\": [\"38Gs0H8BVp8Gz4wlXNq5\"],\n            \"mustNot\": [],\n            \"should\": [],\n            \"shouldMatchAtLeast\": 0\n        },\n        \"memberTagsFilter\": {\n            \"must\": null,\n            \"mustNot\": null,\n            \"should\": [\n                \"{{tagKey0}}\"\n            ],\n            \"shouldMatchAtLeast\": 0\n        },\n        \"scheduling\": {\n            \"scheduleType\": \"Once\",\n            \"scheduleOccurrencesLimit\": 1,\n            \"every\": [],\n            \"startDate\": \"2022-03-28T15:17:11.893+02:00\",\n            \"endDate\": \"2022-04-28T15:17:11.893+02:00\",\n            \"constraints\": [\n                \"onlyAggregateOnActiveDays\"\n            ]\n        },\n        \"maxNumberOfIssues\": 3,\n        \"translations\": null,\n        \"rewards\": [\n            {\n                \"customFields\": null,\n                \"tags\": null,\n                \"metadata\": null,\n                \"name\": \"Given Pfunguro 1\",\n                \"description\": \"Test_description 1\",\n                \"rewardRank\": \"1,2,3,4-10\",\n                \"rewardValue\": 0.10758983118804344,\n                \"icon\": null,\n                \"issueLimit\": null,\n                \"delay\": 100,\n                \"pointInTime\": null,\n                \"period\": 100,\n                \"translations\": null,\n                \"addConstraints\": [],\n                \"rewardTypeId\": \"28Gs0H8BVp8Gz4wlN9oO\"\n            }\n        ],\n        \"constraints\": [\n            \"initialState\",\n            \"memberAcknowledgmentRequired\"\n        ]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements"
							]
						},
						"description": "Create Achievements in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "get Achievements",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements?id={{achievementId0}},{{achievementId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements"
							],
							"query": [
								{
									"key": "id",
									"value": "{{achievementId0}},{{achievementId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Achievements. This assumes that achievements have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "update Achievements",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\"id\":\"{{achievementId0}}\",\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":null,\n    \"name\":null,\n    \"description\":\"updated desc 450e717c-709d-4261-ad67-cef8f00651cf\",\n    \"termsAndConditions\":\"New Terms 123\",\n    \"icon\":null,\n    \"achievementDependencies\":null,\n    \"memberTagsFilter\":null,\n    \"scheduling\":null,\n    \"achievementLiveStatus\":null,\n    \"maxNumberOfIssues\":4,\n    \"constraints\":[\"deprecated\"]\n    },\n    {\"id\":\"{{achievementId1}}\",\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":null,\n    \"name\":null,\n    \"description\":\"update description 450e717c-709d-4261-ad67-cef8f00651cf\",\n    \"termsAndConditions\":\"New Terms 123\",\n    \"icon\":null,\n    \"achievementDependencies\":null,\n    \"memberTagsFilter\":null,\n    \"scheduling\":null,\n    \"achievementLiveStatus\":null,\n    \"maxNumberOfIssues\":4,\n    \"constraints\":[\"deprecated\"]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements"
							]
						},
						"description": "Update existing Achievements in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "get Achievements By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{achievementName1}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements",
								"query"
							]
						},
						"description": "Retrieve Achievements from Ziqni database by unique Achievements ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "delete Achievements",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements?id={{achievementId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements"
							],
							"query": [
								{
									"key": "id",
									"value": "{{achievementId0}}"
								}
							]
						},
						"description": "Delete Achievements for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "delete Achievements By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{achievementName0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements",
								"delete"
							]
						},
						"description": "Delete Achievements from Ziqni database by unique Achievements ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/achievements/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"achievements",
								"state"
							]
						},
						"description": "Manage the state of achievement - Draft, Live, Archived"
					},
					"response": []
				}
			]
		},
		{
			"name": "action-types",
			"item": [
				{
					"name": "create Action Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"actionTypeName\".concat([i]), requestJson[i].name);",
									"    // set the action type key",
									"    pm.collectionVariables.set(\"actionTypeKey\".concat([i]), requestJson[i].key);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the action type id",
									"    pm.collectionVariables.set(\"actionTypeId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"b361f6ddb5cb\":\"MetaValue\"\n        },\n    \"name\": \"Test_name-332452b4-c047-45fe-adfc-b31164376879\",\n    \"key\": \"Test_key-b3eae4e7-3890-47a1-aaf0-2111a420f456\",\n    \"description\": \"Test Description 0\",\n    \"unitOfMeasureType\": \"Other\",\n    \"addConstraints\": []\n},\n{\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"b361f6dd18f882251757\":\"MetaValue\"\n        },\n    \"name\": \"Test_name-332452b4-c047-45fe-adfc-b311321014c7\",\n    \"key\": \"Test_key-b3eae4e7-3890-47a1-aaf0-2111a420gh63656\",\n    \"description\": \"Test Description 1\",\n    \"unitOfMeasureType\": \"Other\",\n    \"addConstraints\": []\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/action-types",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"action-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Action Types",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/action-types?_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"action-types"
							],
							"query": [
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update Action Types",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"id\":\"{{actionTypeId0}}\",\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n        },\n    \"name\": \"Test_name-332452b4-c047-45fe-adfc-b311321014c7\",\n    \"description\": \"Updated Test Description\",\n    \"unitOfMeasureType\": \"Other\",\n    \"addConstraints\": [],\n    \"removeConstraints\": []\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/action-types",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"action-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Action Types By Query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{actionTypeKey0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/action-types/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"action-types",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Action Types",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/action-types?id={{actionTypeId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"action-types"
							],
							"query": [
								{
									"key": "id",
									"value": "{{actionTypeId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Action Types By Query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{actionTypeKey1}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/action-types/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"action-types",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "api-keys",
			"item": [
				{
					"name": "Create api keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the api key id",
									"    pm.collectionVariables.set(\"apiKeyId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customFields\":{\n        \"test_cf_term68b743e9-2833-4a61-8595-3fa536c3ab9b\":\"name\"\n        },\n    \"tags\":[\"Test_key-1f97cdc4-fdb4-4f1e-b93c-e3bc3a7fd69f\"],\n    \"metadata\":{\n        \"b03f83fa-c4e1-4353-a776-e9d63d614ff1\":\"24f910de-2e6b-453f-88bc-4be3b89b62b8\"\n        },\n    \"description\":\"Test description\",\n    \"whiteListIPs\":[\"127.0.0.1\"],\n    \"role\":\"Web\",\n    \"addConstraints\":[\"active\",\"default\"]\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys"
							]
						},
						"description": "Create a new Api key in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get api keys by Id",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys/{{apiKeyId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys",
								"{{apiKeyId0}}"
							]
						},
						"description": "Returns an Api key by identifier provided. This assumes that api keys have first been created via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update api keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"apiKeyDescription0\", requestJson.description);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{apiKeyId0}}\",\n    \"customFields\": {\n        \"test_cf_term68b743e9-2833-4a61-8595-3fa536c3ab9b\":\"name_update\"\n    },\n    \"tags\": [\"Test_key-1f97cdc4-fdb4-4f1e-b93c-e3bc3a7fd69f\"],\n    \"metadata\": {\n        \"b03f83fa-c4e1-4353-a776-e9d63d614ff1\":\"24f910de-2e6b-453f-88bc-4be3b89b62b8\"\n    },\n    \"description\": \"updated User api key\",\n    \"whiteListIPs\": [\n        \"123.221.22.1\",\n        \"333.224.34.1\"\n    ],\n    \"role\": \"Web\",\n    \"addConstraints\":[\"active\",\"default\"],\n    \"removeConstraints\": [\"default\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys"
							]
						},
						"description": "Update an existing Api key in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get api keys",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys?id={{apiKeyId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys"
							],
							"query": [
								{
									"key": "id",
									"value": "{{apiKeyId0}}",
									"description": "The unique identifiers of the resources"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Api keys. This assumes that api keys have first been created via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get api keys by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{apiKeyId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys",
								"query"
							]
						},
						"description": "Retrieve an Api key or a list of Api keys by query"
					},
					"response": []
				},
				{
					"name": "Delete api keys by Id",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys/{{apiKeyId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys",
								"{{apiKeyId0}}"
							]
						},
						"description": "Delete the Api key for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete api keys by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{apiKeyId0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/api-keys/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"api-keys",
								"delete"
							]
						},
						"description": "Delete an Api key or a list of Api keys from Ziqni by query"
					},
					"response": []
				}
			]
		},
		{
			"name": "awards",
			"item": [
				{
					"name": "get Awards",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/awards?id={{awardId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"awards"
							],
							"query": [
								{
									"key": "id",
									"value": "{{awardId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Awards."
					},
					"response": []
				},
				{
					"name": "get Awards By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{awardId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/awards/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"awards",
								"query"
							]
						},
						"description": "Retrieve Awards from Ziqni database by unique Awards ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"constraints\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"constraints\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/awards/claim",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"awards",
								"claim"
							]
						},
						"description": "Claim Awards that need to be actioned at"
					},
					"response": []
				}
			]
		},
		{
			"name": "collaborators",
			"item": [
				{
					"name": "Create collaborators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"collaboratorEmail\".concat([i]), requestJson[i].email);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"collaboratorId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"email\": \"clinton@ziqni.com\",\n        \"addRoles\": [\"AdminConsumer\", \"AdminEvents\"]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators"
							]
						},
						"description": "Create a new Collaborator in the Ziqni"
					},
					"response": []
				},
				{
					"name": "get Collaborators",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators?emails={{collaboratorEmail0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators"
							],
							"query": [
								{
									"key": "emails",
									"value": "{{collaboratorEmail0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "update Collaborators",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"email\": \"mcdonavann@ziqni.com\",\n        \"addRoles\": [\"AdminConsumer\", \"AdminEvents\"]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators"
							]
						},
						"description": "Update an existing Collaborator in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "get Available Roles For Collaborators",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators/available-roles",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators",
								"available-roles"
							]
						},
						"description": "Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "delete Collaborators",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators?emails={{collaboratorEmail0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators"
							],
							"query": [
								{
									"key": "emails",
									"value": "{{collaboratorEmail0}}"
								}
							]
						},
						"description": "Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"email\",\n            \"queryValues\": [\n                \"mcdonavann@ziqni.com\"\n                ]\n        }],\n    \"shouldMatch\": 10,\n    \"skip\": 5,\n    \"limit\": 23\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators",
								"query"
							]
						},
						"description": "Retrieve collaborators for the account"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValues\": [\n                \"some text\",\n                \"some text\"\n            ]\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValues\": [\n                \"some text\",\n                \"some text\"\n            ]\n        }\n    ],\n    \"mustNot\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValues\": [\n                \"some text\",\n                \"some text\"\n            ]\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValues\": [\n                \"some text\",\n                \"some text\"\n            ]\n        }\n    ],\n    \"should\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValues\": [\n                \"some text\",\n                \"some text\"\n            ]\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValues\": [\n                \"some text\",\n                \"some text\"\n            ]\n        }\n    ],\n    \"gte\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        }\n    ],\n    \"gt\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        }\n    ],\n    \"lte\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        }\n    ],\n    \"lt\": [\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        },\n        {\n            \"queryField\": \"some text\",\n            \"queryValue\": \"some text\"\n        }\n    ],\n    \"range\": [\n        {\n            \"queryField\": \"some text\",\n            \"gt\": \"some text\",\n            \"lt\": \"some text\",\n            \"constraints\": [\n                \"some text\",\n                \"some text\"\n            ]\n        },\n        {\n            \"queryField\": \"some text\",\n            \"gt\": \"some text\",\n            \"lt\": \"some text\",\n            \"constraints\": [\n                \"some text\",\n                \"some text\"\n            ]\n        }\n    ],\n    \"sortBy\": [\n        {\n            \"queryField\": \"some text\",\n            \"order\": \"Desc\"\n        },\n        {\n            \"queryField\": \"some text\",\n            \"order\": \"Asc\"\n        }\n    ],\n    \"multiFields\": [\n        {\n            \"queryFields\": [\n                \"some text\",\n                \"some text\"\n            ],\n            \"queryValue\": \"some text\"\n        },\n        {\n            \"queryFields\": [\n                \"some text\",\n                \"some text\"\n            ],\n            \"queryValue\": \"some text\"\n        }\n    ],\n    \"includeFields\": [\n        \"some text\",\n        \"some text\"\n    ],\n    \"hasValue\": [\n        \"some text\",\n        \"some text\"\n    ],\n    \"hasNoValue\": [\n        \"some text\",\n        \"some text\"\n    ],\n    \"shouldMatch\": 10,\n    \"skip\": 5,\n    \"limit\": 23,\n    \"constraints\": [\n        \"some text\",\n        \"some text\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/collaborators/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"collaborators",
								"delete"
							]
						},
						"description": "Remove collaborators from account"
					},
					"response": []
				}
			]
		},
		{
			"name": "competitions",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/competitions/:id/clone",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"competitions",
										":id",
										"clone"
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Clones a Competition for the identifier provided"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/competitions/:id/leaderboards?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"competitions",
										":id",
										"leaderboards"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns a list of Leaderborads for the Competition id provided"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/competitions/:id/entries?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"competitions",
										":id",
										"entries"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns all Entries for the Competition id provided"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/competitions/:id/contests?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"competitions",
										":id",
										"contests"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns all Contests for the Competition id provided"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/competitions/:id/brackets?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"competitions",
										":id",
										"brackets"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns all Contests for the Competition id provided in Brackets"
							},
							"response": []
						}
					]
				},
				{
					"name": "create Competitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"competitionName0\", requestJson.name);",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the competition id",
									"    pm.collectionVariables.set(\"competitionId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"competitionType\": \"Leaderboard\",\n    \"numberOfRounds\": 1,\n    \"numberOfGroupStages\": 0,\n    \"name\": \"Test competition\",\n    \"description\": \"Test Description\",\n    \"termsAndConditions\": \"test terms and conditions\",\n    \"entrantMemberType\": \"Individual\",\n    \"maxNumberOfEntrants\": 1000,\n    \"minNumberOfEntrants\": 1,\n    \"entrantMemberTagsFilter\": {\n        \"must\":[\"{{tagKey0}}\"],\n        \"mustNot\":null,\n        \"should\":null,\n        \"shouldMatchAtLeast\":null\n    },\n    \"productTagsFilter\":{\n        \"must\":[\"{{tagKey1}}\"],\n        \"mustNot\":null,\n        \"should\":null,\n        \"shouldMatchAtLeast\":null\n    },\n    \"productIds\": null,\n    \"rules\": [{\n        \"entityId\": null,\n        \"action\": \"Test Action\",\n        \"context\": \"Test Context\",\n        \"rules\": {\n            \"type\": \"expression\",\n            \"mustMatchAll\": true,\n            \"mustEvaluateTo\": true,\n            \"scope\": \"Scope\",\n            \"operand\": \"Operand\",\n            \"operator\": \"Operator\",\n            \"value\": null,\n            \"rules\": null,\n            \"then\": null,\n            \"lineNumber\": 1\n        },\n        \"id\": null,\n        \"entityType\": null\n    }],\n    \"scheduledStartDate\": \"2022-03-24T13:22:16.68+02:00\",\n    \"scheduledEndDate\": \"2022-03-31T13:22:16.68+02:00\",\n    \"translations\": null,\n    \"contests\": {\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": null,\n        \"name\": \"Contest 1\",\n        \"description\": \"For Competition\",\n        \"termsAndConditions\": null,\n        \"roundType\": \"TimeBound\",\n        \"maxNumberOfEntrants\": null,\n        \"minNumberOfEntrants\": null,\n        \"rules\": null,\n        \"scheduledStartDate\": null,\n        \"scheduledEndDate\": null,\n        \"strategies\": null,\n        \"constraints\": [],\n        \"translations\": null,\n        \"rewards\": [{\n            \"customFields\": null,\n            \"tags\": null,\n            \"metadata\": null,\n            \"name\": \"Pfunguro\",\n            \"description\": \"Test_description\",\n            \"rewardRank\": \"1,2,3\",\n            \"rewardValue\": 0.06438600205843392,\n            \"icon\": null,\n            \"issueLimit\": null,\n            \"delay\": 100,\n            \"pointInTime\": null,\n            \"period\": 100,\n            \"translations\": null,\n            \"addConstraints\": [],\n            \"rewardTypeId\": \"iEKpu38BqB4XSXWDv6Pf\"\n        }]\n    },\n    \"rewards\": [{\n            \"customFields\": null,\n            \"tags\": null,\n            \"metadata\": null,\n            \"name\": \"Pfunguro\",\n            \"description\": \"Test_description\",\n            \"rewardRank\": \"1,2,3\",\n            \"rewardValue\": 0.06438600205843392,\n            \"icon\": null,\n            \"issueLimit\": null,\n            \"delay\": 100,\n            \"pointInTime\": null,\n            \"period\": 100,\n            \"translations\": null,\n            \"addConstraints\": [],\n            \"rewardTypeId\": \"iEKpu38BqB4XSXWDv6Pf\"\n        }],\n    \"constraints\": [\"optinRequiredForEntrants\"],\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"c8786add-3775-4022-939e-bdc63d5ae8f2\":\"b68d9232-fef7-4c80-a8eb-a01ab1f30748\"\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions"
							]
						},
						"description": "Create a new Competition in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "create Simple Competition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"competitionName0\", requestJson.name);",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the competition id",
									"    pm.collectionVariables.set(\"competitionId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"competitionType\": \"Leaderboard\",\n    \"numberOfRounds\": 1,\n    \"numberOfGroupStages\": 0,\n    \"name\": \"Test competition\",\n    \"description\": \"Test Description\",\n    \"termsAndConditions\": \"test terms and conditions\",\n    \"entrantMemberType\": \"Individual\",\n    \"maxNumberOfEntrants\": 1000,\n    \"minNumberOfEntrants\": 1,\n    \"entrantMemberTagsFilter\": {\n        \"must\": [\n            \"{{tagKey0}}\"\n        ],\n        \"mustNot\": null,\n        \"should\": null,\n        \"shouldMatchAtLeast\": null\n    },\n    \"productTagsFilter\": {\n        \"must\": [\n            \"{{tagKey1}}\"\n        ],\n        \"mustNot\": null,\n        \"should\": null,\n        \"shouldMatchAtLeast\": null\n    },\n    \"productIds\": null,\n    \"rules\": [\n        {\n            \"entityId\": null,\n            \"action\": \"Test Action\",\n            \"context\": \"Test Context\",\n            \"rules\": {\n                \"type\": \"expression\",\n                \"mustMatchAll\": true,\n                \"mustEvaluateTo\": true,\n                \"scope\": \"Scope\",\n                \"operand\": \"Operand\",\n                \"operator\": \"Operator\",\n                \"value\": null,\n                \"rules\": null,\n                \"then\": null,\n                \"lineNumber\": 1\n            },\n            \"id\": null,\n            \"entityType\": null\n        }\n    ],\n    \"scheduledStartDate\": \"2022-03-24T13:22:16.68+02:00\",\n    \"scheduledEndDate\": \"2022-03-31T13:22:16.68+02:00\",\n    \"translations\": null,\n    \"contests\": {\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": null,\n        \"name\": \"Contest 1\",\n        \"description\": \"For Competition\",\n        \"termsAndConditions\": null,\n        \"roundType\": \"TimeBound\",\n        \"maxNumberOfEntrants\": null,\n        \"minNumberOfEntrants\": null,\n        \"rules\": null,\n        \"scheduledStartDate\": null,\n        \"scheduledEndDate\": null,\n        \"strategies\": null,\n        \"constraints\": [],\n        \"translations\": null,\n        \"rewards\": [\n            {\n                \"customFields\": null,\n                \"tags\": null,\n                \"metadata\": null,\n                \"name\": \"Pfunguro\",\n                \"description\": \"Test_description\",\n                \"rewardRank\": \"1,2,3\",\n                \"rewardValue\": 0.06438600205843392,\n                \"icon\": null,\n                \"issueLimit\": null,\n                \"delay\": 100,\n                \"pointInTime\": null,\n                \"period\": 100,\n                \"translations\": null,\n                \"addConstraints\": [],\n                \"rewardTypeId\": \"iEKpu38BqB4XSXWDv6Pf\"\n            }\n        ]\n    },\n    \"rewards\": [\n        {\n            \"customFields\": null,\n            \"tags\": null,\n            \"metadata\": null,\n            \"name\": \"Pfunguro\",\n            \"description\": \"Test_description\",\n            \"rewardRank\": \"1,2,3\",\n            \"rewardValue\": 0.06438600205843392,\n            \"icon\": null,\n            \"issueLimit\": null,\n            \"delay\": 100,\n            \"pointInTime\": null,\n            \"period\": 100,\n            \"translations\": null,\n            \"addConstraints\": [],\n            \"rewardTypeId\": \"iEKpu38BqB4XSXWDv6Pf\"\n        }\n    ],\n    \"constraints\": [\n        \"optinRequiredForEntrants\"\n    ],\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"c8786add-3775-4022-939e-bdc63d5ae8f2\": \"b68d9232-fef7-4c80-a8eb-a01ab1f30748\"\n    },\n    \"strategies\": {\n        \"strategyType\": \"FirstTo\",\n        \"rankingStrategy\": {\n            \"constraints\": [\n                \"test_constraints\"\n            ]\n        },\n        \"scoringStrategy\": {\n            \"limitUpdatesTo\": 400,\n            \"sumBestXOf\": 100,\n            \"lastUpdateTimeStamp\": 100,\n            \"recordTimeWhenSumReaches\": 300.0\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions/simple",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions",
								"simple"
							]
						},
						"description": "Create a new Competition in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "get Competitions",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions?id={{competitionId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions"
							],
							"query": [
								{
									"key": "id",
									"value": "{{competitionId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "update Competitions",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":\"{{competitionId0}}\",\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":null,\n    \"competitionType\":null,\n    \"numberOfRounds\":null,\n    \"numberOfGroupStages\":null,\n    \"name\":null,\n    \"description\":\"updated description 23443a54-9286-43e6-afff-44abfae89e3b\",\n    \"termsAndConditions\":null,\n    \"entrantMemberType\":null,\n    \"maxNumberOfEntrants\":null,\n    \"minNumberOfEntrants\":null,\n    \"scheduledStartDate\":null,\n    \"scheduledEndDate\":null,\n    \"entrantMemberTagsFilter\": null,\n    \"productTagsFilter\":null,\n    \"constraints\":null,\n    \"productIds\":null,\n    \"createContests\":null,\n    \"updateContests\":null\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions"
							]
						},
						"description": "Update an existing Competition in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "get Competitions By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{competitionId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions",
								"query"
							]
						},
						"description": "Retrieve Competitions from Ziqni database by unique Competition ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"memberRefId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"entrantStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"entityId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"entrantAction\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"memberId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    {\n        \"memberRefId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"entrantStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"entityId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"entrantAction\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"memberId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions/entries",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions",
								"entries"
							]
						},
						"description": "Updates the status of the Entrants for a Competition id provided"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/competitions/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"competitions",
								"state"
							]
						},
						"description": "Manages the Competitions state"
					},
					"response": []
				}
			]
		},
		{
			"name": "compute-engines",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "get Compute Engines By Id",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines/{{computeEngineId0}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"compute-engines",
										"{{computeEngineId0}}"
									]
								},
								"description": "Returns an Compute Engine by identifier provided. This assumes that compute engines have first been created via a POST request or web console"
							},
							"response": []
						},
						{
							"name": "delete Compute Engines By Id",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines/{{computeEngineId0}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"compute-engines",
										"{{computeEngineId0}}"
									]
								},
								"description": "Delete the Compute Engine for a given identifier specified"
							},
							"response": []
						}
					]
				},
				{
					"name": "create Compute Engines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"pm.collectionVariables.set(\"computeEngineName0\", requestJson.name);",
									"pm.collectionVariables.set(\"computeEngineDescription0\", requestJson.repositoryId);",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the file id",
									"    pm.collectionVariables.set(\"computeEngineId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"c7ae8daf-7ab8-4e16-8820-d9a06638db0e\": \"b5695d43-ea75-492a-9c1e-2fc5b00395ba\"\n    },\n    \"description\": \"Test_key-0cdd3b75-4c31-40d1-ab4f-657c0fb90c1d\",\n    \"version\": null,\n    \"name\": \"Test_name-11a2fc28-ae29-4bca-bd19-8378bf1f0b82\",\n    \"uptime\": 55034353,\n    \"constraints\": [],\n    \"statistics\": null,\n    \"lastKnownStatusCode\": 62702245\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"compute-engines"
							]
						},
						"description": "Create a new Compute Engine in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "get Compute Engines",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines?id={{computeEngineId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"compute-engines"
							],
							"query": [
								{
									"key": "id",
									"value": "{{computeEngineId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Compute Engines. This assumes that api keys have first been created via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "update Compute Engines",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{computeEngineId0}},\n    \"description\": \"updated description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"compute-engines"
							]
						},
						"description": "Update an existing Compute Engine in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "get Compute Engines By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{computeEngineId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"compute-engines",
								"query"
							]
						},
						"description": "Retrieve an Compute Engine or a list of Compute Engines by query"
					},
					"response": []
				},
				{
					"name": "Delete compute engines by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{computeEngineName0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/compute-engines/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"compute-engines",
								"delete"
							]
						},
						"description": "Delete an Compute Engine or a list of Compute Engines from Ziqni by query"
					},
					"response": []
				}
			]
		},
		{
			"name": "connections",
			"item": [
				{
					"name": "sqs",
					"item": [
						{
							"name": "Create sqs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// parse request",
											"var requestJson = JSON.parse(request.data);",
											"",
											"// set the name variable",
											"pm.collectionVariables.set(\"sqsConnectionName0\", requestJson.name);",
											"",
											"// parse response",
											"var responseJson = JSON.parse(responseBody);",
											"",
											"// get the length of results",
											"var responseLength = responseJson.results.length;",
											"for (i = 0; i < responseLength; i++) {",
											"    // set the competition id",
											"    pm.collectionVariables.set(\"sqsConnectionId\".concat([i]), responseJson.results[i].id);",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customFields\":\n        {\"test_cf_termf1fb8258-8430-45d1-aa56-87b6d80b6f5f\":\"name\"},\n    \"tags\":[\"Test_key-2908e27c-3a84-45cd-8269-b7bf21f404a3\"],\n    \"metadata\":\n        {\"239be65d-1969-4965-887c-8d9fc6b68d54\":\"46a89988-165f-431c-954f-644b877a9a73\"},\n    \"name\":\"SQS_1\",\n    \"uri\":\"https://www.ziqni.com\",\n    \"acessKey\":\"Test_Access_key\",\n    \"secretKey\":\"Test_Secret_key\",\n    \"description\":\"My example sqs connection\",\n    \"transformerId\":\"tSlP1X8BKIbFZ6_wxy25\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs"
									]
								},
								"description": "Create a new SQS Consumer Connection in the Ziqni system"
							},
							"response": []
						},
						{
							"name": "Get sqs",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs?id={{sqsConnectionId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs"
									],
									"query": [
										{
											"key": "id",
											"value": "{{sqsConnectionId0}}"
										},
										{
											"key": "_limit",
											"value": "{{ziqniDefaultLimit}}",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "{{ziqniDefaultSkip}}",
											"description": "Skip the returned records found and return the next batch of records"
										}
									]
								},
								"description": "Return a list of SQS Consumer Connections"
							},
							"response": []
						},
						{
							"name": "Update sqs",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":\"{{sqsConnectionId0}}\",\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":null,\n    \"name\":null,\n    \"description\":\"Updated sqs description\",\n    \"uri\":null,\n    \"acessKey\":null,\n    \"secretKey\":null,\n    \"transformerId\":null\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs"
									]
								},
								"description": "Update an existing SQS Consumer Connection in the Ziqni system"
							},
							"response": []
						},
						{
							"name": "Get sqs by query",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{sqsConnectionName0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs/query",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs",
										"query"
									]
								},
								"description": "Retrieve a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID's or any other Post body parameters using the POST method"
							},
							"response": []
						},
						{
							"name": "Delete sqs",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs?id={{sqsConnectionId0}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs"
									],
									"query": [
										{
											"key": "id",
											"value": "{{sqsConnectionId0}}"
										}
									]
								},
								"description": "Delete the SQS Consumer Connection for a given identifier specified"
							},
							"response": []
						},
						{
							"name": "Delete sqs by query",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{sqsConnectionName0}}\"\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs/delete",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs",
										"delete"
									]
								},
								"description": "Delete a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID's or any other POST body parameters using the POST method"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs/state",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs",
										"state"
									]
								},
								"description": "Update the state of an SQS Connection using the POST method"
							},
							"response": []
						}
					]
				},
				{
					"name": "rabbitmq",
					"item": [
						{
							"name": "Create rabbitmq",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// parse request",
											"var requestJson = JSON.parse(request.data);",
											"",
											"// set the name variable",
											"pm.collectionVariables.set(\"rabbitMqConnectionName0\", requestJson.name);",
											"",
											"// parse response",
											"var responseJson = JSON.parse(responseBody);",
											"",
											"// get the length of results",
											"var responseLength = responseJson.results.length;",
											"for (i = 0; i < responseLength; i++) {",
											"    // set the rabbitMq id",
											"    pm.collectionVariables.set(\"rabbitMqConnectionId\".concat([i]), responseJson.results[i].id);",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customFields\":{\"test_cf_term6d7cd179-015b-43b9-8ba4-3e0261381ab1\":\"name\"},\n    \"tags\":[\"Test_key-0eb85820-059e-4400-b5d9-27b8a6eb3a75\"],\n    \"metadata\":null,\n    \"name\":\"my-rabbit-connection\",\n    \"description\":\"Test Description\",\n    \"port\":30007,\n    \"virtualHost\":\"/\",\n    \"uri\":\"broker-service.competitionlabs.com\",\n    \"userName\":\"complabs_stg_client\",\n    \"password\":\"bKv=73j>TW86\",\n    \"queueName\":\"sabai99_events-test-events-stream\",\n    \"exchange\":\"sabai99_prd_events\",\n    \"routingKey\":\"BET_LOG_KA\",\n    \"addConstraints\":[\"ssl\",\"durable\",\"exclusive\",\"autoDelete\"],\n    \"transformerId\":\"xil-1X8BKIbFZ6_wpS1l\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/rabbitmq",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"rabbitmq"
									]
								},
								"description": "Create a new RabbitMq Consumer Connection in the Ziqni system"
							},
							"response": []
						},
						{
							"name": "Get rabbitmq",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/rabbitmq?id={{rabbitMqConnectionId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"rabbitmq"
									],
									"query": [
										{
											"key": "id",
											"value": "{{rabbitMqConnectionId0}}"
										},
										{
											"key": "_limit",
											"value": "{{ziqniDefaultLimit}}",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "{{ziqniDefaultSkip}}",
											"description": "Skip the returned records found and return the next batch of records"
										}
									]
								},
								"description": "Return a list of RabbitMq Consumer Connections"
							},
							"response": []
						},
						{
							"name": "Update rabbitmq",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":\"{{rabbitMqConnectionId0}}\",\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":null,\n    \"name\":\"UPDATED_NAME\",\n    \"description\":\"Updated rabbitqm description\",\n    \"uri\":null,\n    \"virtualHost\":null,\n    \"port\":null,\n    \"userName\":null,\n    \"password\":null,\n    \"queueName\":null,\n    \"exchange\":null,\n    \"routingKey\":null,\n    \"constraints\":null,\n    \"transformerId\":null\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/rabbitmq",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"rabbitmq"
									]
								},
								"description": "Update an existing RabbitMq Consumer Connection in the Ziqni system"
							},
							"response": []
						},
						{
							"name": "Get rabbitmq by query",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{rabbitMqConnectionName0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/rabbitmq/query",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"rabbitmq",
										"query"
									]
								},
								"description": "Retrieve a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique Connection ID's or any other Post body parameters using the POST method"
							},
							"response": []
						},
						{
							"name": "Delete rabbitmq",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/rabbitmq?id={{rabbitMqConnectionId0}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"rabbitmq"
									],
									"query": [
										{
											"key": "id",
											"value": "{{rabbitMqConnectionId0}}"
										}
									]
								},
								"description": "Delete the RabbitMq Consumer Connection for a given identifier specified"
							},
							"response": []
						},
						{
							"name": "Delete rabbitmq by query",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{rabbitMqConnectionName0}}\"\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/sqs/delete",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"sqs",
										"delete"
									]
								},
								"description": "Delete a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID's or any other POST body parameters using the POST method"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/rabbitmq/state",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"rabbitmq",
										"state"
									]
								},
								"description": "Update the state of a RabbitMQ Connection using the POST method"
							},
							"response": []
						}
					]
				},
				{
					"name": "kafka",
					"item": [
						{
							"name": "Create kafka",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// parse request",
											"var requestJson = JSON.parse(request.data);",
											"",
											"// set the name variable",
											"pm.collectionVariables.set(\"kafkaConnectionName0\", requestJson.name);",
											"",
											"// parse response",
											"var responseJson = JSON.parse(responseBody);",
											"",
											"// get the length of results",
											"var responseLength = responseJson.results.length;",
											"for (i = 0; i < responseLength; i++) {",
											"    // set the kafka id",
											"    pm.collectionVariables.set(\"kafkaConnectionId\".concat([i]), responseJson.results[i].id);",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customFields\":{\"test_cf_term72021018-c5c5-419a-82fa-05fd0b4eb6b6\":\"name\"},\n    \"tags\":[\"Test_key-19553969-50f5-41cf-bf87-f618f8b66eaa\"],\n    \"metadata\":{\"c720d5a5-0500-4837-acf1-25892f4c9a19\":\"95094f88-b438-480f-a753-4bdbc298ac33\"},\n    \"name\":\"Kafka_1\",\n    \"description\":\"My example kafka connection\",\n    \"brokers\":\"Example broker\",\n    \"groupId\":\"Test_Group_Id\",\n    \"topic\":\"Test_Topic\",\n    \"transformerId\":\"zSmR1X8BKIbFZ6_w1C2x\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka"
									]
								},
								"description": "Create a new Kafka Consumer Connection in the Ziqni system"
							},
							"response": []
						},
						{
							"name": "Get kafka",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka?id={{kafkaConnectionId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka"
									],
									"query": [
										{
											"key": "id",
											"value": "{{kafkaConnectionId0}}"
										},
										{
											"key": "_limit",
											"value": "{{ziqniDefaultLimit}}",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "{{ziqniDefaultSkip}}",
											"description": "Skip the returned records found and return the next batch of records"
										}
									]
								},
								"description": "Return a list of Kafka Consumer Connections"
							},
							"response": []
						},
						{
							"name": "Update kafka",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":null,\n    \"name\":null,\n    \"description\":\"Updated kafka description\",\n    \"brokers\":null,\n    \"groupId\":null,\n    \"topic\":null,\n    \"transformerId\":null,\n    \"id\":\"{{kafkaConnectionId0}}\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka"
									]
								},
								"description": "Update an existing Kafka Consumer Connection in the Ziqni system"
							},
							"response": []
						},
						{
							"name": "Get kafka by query",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{kafkaConnectionName0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka/query",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka",
										"query"
									]
								},
								"description": "Retrieve a Kafka Connection or a list of Kafka Connections from Ziqni by unique Connection ID's or any other Post body parameters using the POST method"
							},
							"response": []
						},
						{
							"name": "Delete kafka",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka?id={{kafkaConnectionId0}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka"
									],
									"query": [
										{
											"key": "id",
											"value": "{{kafkaConnectionId0}}"
										}
									]
								},
								"description": "Delete the Kafka Consumer Connection for a given identifier specified"
							},
							"response": []
						},
						{
							"name": "Delete kafka by query",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{kafkaConnectionName0}}\"\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka/delete",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka",
										"delete"
									]
								},
								"description": "Delete a Kafka Connection or a list of Kafka Connections from Ziqni by unique Connection ID's or any other POST body parameters using the POST method"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/connections/kafka/state",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"connections",
										"kafka",
										"state"
									]
								},
								"description": "Update the state of a Kafka Connection using the POST method"
							},
							"response": []
						}
					]
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/connections/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"connections",
								"state"
							]
						},
						"description": "Update the state of a Consumer using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "contests",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"contests",
										":id",
										"leaderboard"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns a leaderborad for the Contests id provided"
							},
							"response": [
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A leaderboard for the contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/leaderboard?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"leaderboard"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"contests",
										":id",
										"entries"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns all Entries for the Contest id provided"
							},
							"response": [
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of Entrants for the competition/contest and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/entries?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"entries"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"contests",
										":id",
										"parents"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns all parent Contests for the Contest id provided"
							},
							"response": [
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/parents?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"parents"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"contests",
										":id",
										"children"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns all children Contests for the Contest id provided"
							},
							"response": [
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of contests and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/children?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"children"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"contests",
										":id",
										"clone"
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Clones a Contest for the identifier provided"
							},
							"response": [
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A modeled response of a Contest that can be used for Contest creation * The competitionId has to be changed to the competition Id of the competition that the contest will be cloned to",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/contests/:id/clone",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"contests",
												":id",
												"clone"
											],
											"variable": [
												{
													"key": "id",
													"value": "repr",
													"description": "(Required) Unique identifier of the resource"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "create Contests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"contestName0\", requestJson.name);",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the competition id",
									"    pm.collectionVariables.set(\"contestId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":{\n        \"df3a7be2-1e2d-403f-b0ba-f84bdfe7e409\":\"f05baa4f-f7e0-45f9-9633-d0b4d7250201\"\n        },\n    \"competitionId\":\"9MHv0H8BVp8Gz4wl9dqm\",\n    \"row\":null,\n    \"round\":2,\n    \"groupStage\":null,\n    \"groupStageLabel\":null,\n    \"entrantsFromContest\":null,\n    \"name\":\"Test Group Stage Label\",\n    \"description\":\"Test Description\",\n    \"termsAndConditions\":\"Test Terms and Conditions\",\n    \"roundType\":\"TimeBound\",\n    \"maxNumberOfEntrants\":100,\n    \"minNumberOfEntrants\":20,\n    \"rules\":[{\n        \"entityId\":null,\n        \"action\":\"Test Action\",\n        \"context\":\"Test Context\",\n        \"rules\":\n        {\n            \"type\":\"expression\",\n            \"mustMatchAll\":true,\n            \"mustEvaluateTo\":true,\n            \"scope\":\"Scope\",\n            \"operand\":\"Operand\",\n            \"operator\":\"Operator\",\n            \"value\":null,\n            \"rules\":null,\n            \"then\":null,\n            \"lineNumber\":1\n            },\n            \"id\":null,\n            \"entityType\":null\n            }],\n            \"scheduledStartDate\":\"2022-03-28T16:31:08.731+02:00\",\n            \"scheduledEndDate\":\"2022-03-29T16:31:08.731+02:00\",\n            \"strategies\":\n            {\n                \"strategyType\":\"FirstTo\",\n                \"rankingStrategy\":\n                {\n                    \"constraints\":[\"test_constraints\"]\n                    },\n                    \"scoringStrategy\":\n                    {\n                        \"limitUpdatesTo\":400,\n                        \"sumBestXOf\":100,\n                        \"lastUpdateTimeStamp\":100,\n                        \"recordTimeWhenSumReaches\":300.0\n                        }\n                        },\n                        \"translations\":\n                        [{\n                            \"id\":null,\n                            \"accountId\":null,\n                            \"entityId\":null,\n                            \"entityType\":null,\n                            \"version\":null,\n                            \"created\":null,\n                            \"translations\":[{\"fieldName\":\"name\",\"text\":\"Given\"}],\n                                \"languageKey\":\"fit\"\n                                }],\n                                \"rewards\":[{\n                                    \"customFields\":null,\n                                    \"tags\":null,\n                                    \"metadata\":null,\n                                    \"name\":\"Given Pfunguro\",\n                                    \"description\":\"Test_description\",\n                                    \"rewardRank\":\"1,2,3,4-10\",\n                                    \"rewardValue\":0.33405660734854725,\n                                    \"icon\":null,\n                                    \"issueLimit\":null,\n                                    \"delay\":100,\n                                    \"pointInTime\":null,\n                                    \"period\":100,\n                                    \"translations\":null,\n                                    \"addConstraints\":[],\n                                    \"rewardTypeId\":\"-sHw0H8BVp8Gz4wlE9p9\"\n                                    }],\n                                    \"constraints\":[]\n                                    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/contests",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"contests"
							]
						},
						"description": "Create a new Contests in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "get Contests",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/contests?id={{contestId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"contests"
							],
							"query": [
								{
									"key": "id",
									"value": "{{contestId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Contests. This assumes that contests have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "update Contest",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":\"{{contestId0}}\",\n    \"customFields\":null,\n    \"tags\":[\"Test_key-05633f90-16a6-4cfd-911b-8d933bfe6403\"],\n    \"metadata\":null,\n    \"name\":null,\n    \"description\":null,\n    \"termsAndConditions\":null,\n    \"roundType\":null,\n    \"maxNumberOfEntrants\":null,\n    \"minNumberOfEntrants\":null,\n    \"scheduledStartDate\":null,\n    \"scheduledEndDate\":null,\n    \"strategies\":null,\n    \"constraints\":null\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/contests",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"contests"
							]
						},
						"description": "Update an existing Contest in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "get Contests By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{contestId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/contests/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"contests",
								"query"
							]
						},
						"description": "Retrieve Contests from Ziqni database by unique Contests ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"contestId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    {\n        \"contestId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/contests/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"contests",
								"state"
							]
						},
						"description": "Manages the Contests state"
					},
					"response": []
				}
			]
		},
		{
			"name": "custom-fields",
			"item": [
				{
					"name": "Create custom fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"customFieldName\".concat([i]), requestJson[i].name);",
									"    // set the product reference id",
									"    pm.collectionVariables.set(\"customFieldKey\".concat([i]), requestJson[i].key);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"customFieldId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n    \"name\": \"test custom field 0\",\n    \"key\": \"test_custom_field_key\",\n    \"description\": \"some text\",\n    \"fieldType\": \"TextArray\",\n    \"appliesTo\": \"Repository\"\n},\n{\n    \"name\": \"test custom field 1\",\n    \"key\": \"test_custom_field_key_1\",\n    \"description\": \"test description\",\n    \"fieldType\": \"TextArray\",\n    \"appliesTo\": \"Repository\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/custom-fields",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"custom-fields"
							]
						},
						"description": "Create new Custom fields in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get custom fields",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/custom-fields?id={{customFieldId0}},{{customFieldId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"custom-fields"
							],
							"query": [
								{
									"key": "id",
									"value": "{{customFieldId0}},{{customFieldId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Custom fields. This assumes that custom fields have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update custom fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"customFieldName0\", requestJson[0].name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"id\": \"{{customFieldId0}}\",\n    \"name\": \"updated custom field name\",\n    \"description\": \"updated description\",\n    \"fieldType\": \"TextArray\",\n    \"appliesTo\": \"Repository\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/custom-fields",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"custom-fields"
							]
						},
						"description": "Update existing Custom fields in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get custom fields by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{customFieldKey0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/custom-fields/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"custom-fields",
								"query"
							]
						},
						"description": "Retrieve Custom fields from Ziqni database by unique Custom field ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete custom fields",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/custom-fields?id={{customFieldId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"custom-fields"
							],
							"query": [
								{
									"key": "id",
									"value": "{{customFieldId0}}"
								}
							]
						},
						"description": "Delete the Custom fields for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete custom fields by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{customFieldKey1}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/custom-fields/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"custom-fields",
								"delete"
							]
						},
						"description": "Delete Custom fields from Ziqni database by unique Custom field ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "events",
			"item": [
				{
					"name": "Create events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the member ref id variable",
									"    pm.collectionVariables.set(\"eventAction\".concat([i]), requestJson[i].action);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the event id",
									"    pm.collectionVariables.set(\"eventId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"memberRefId\":\"Test_key-4d180cbe-3f9a-4b14-8730-233f25a0943e\",\n        \"action\":\"Test_key-2fb87d97-7be0-4239-922c-d194a68856cb\",\n        \"batchId\":\"Test_key-492f10c4-08d1-48c0-942f-e211095924b6\",\n        \"entityRefId\":\"Test_key-4cb78e90-2266-48ca-a641-121ccd6e006d\",\n        \"sourceValue\":1.0,\n        \"transactionTimestamp\":\"2022-03-28T11:38:11.215+02:00\",\n        \"tags\":null,\n        \"eventRefId\":null,\n        \"memberId\":null,\n        \"customFields\":null\n        },\n    {\n        \"memberRefId\":\"Test_key-4d180cbe-3f9a-4b14-8730-233f25a0943e\",\n        \"action\":\"Test_key-2fb87d97-7be0-4239-922c-d194a68856cb\",\n        \"batchId\":\"Test_key-492f10c4-08d1-48c0-942f-e211095924b6\",\n        \"entityRefId\":\"Test_key-4cb78e90-2266-48ca-a641-121ccd6e006d\",\n        \"sourceValue\":1.0,\n        \"transactionTimestamp\":\"2022-03-28T11:38:11.215+02:00\",\n        \"tags\":null,\n        \"eventRefId\":null,\n        \"memberId\":null,\n        \"customFields\":null\n        }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/events",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Create an Event"
					},
					"response": []
				},
				{
					"name": "Get events",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/events?id={{eventId0}},{{eventId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "id",
									"value": "{{eventId0}},{{eventId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Retrieve an Event or a list of Events from Ziqni by unique Event ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Get events by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"action\",\n            \"queryValues\": [\n                \"{{eventAction0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/events/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"events",
								"query"
							]
						},
						"description": "Retrieve an Event or a list of Events from Ziqni by unique Event ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "files",
			"item": [
				{
					"name": "Create folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"pm.collectionVariables.set(\"fileName0\", requestJson.name);",
									"pm.collectionVariables.set(\"fileRepositoryId0\", requestJson.repositoryId);",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the file id",
									"    pm.collectionVariables.set(\"fileId\".concat([i]), responseJson.results[i].id);",
									"    pm.collectionVariables.set(\"externalReference\".concat([i]), responseJson.results[i].externalReference);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customFields\":null,\n    \"tags\":null,\n    \"metadata\":{\"6318a04e-6a13-490d-9aa6-f9b5cb8208e6\":\"51698300-ba75-4e7c-83ad-f3f8eed25ff6\"},\n    \"repositoryId\":\"{{repositoryId0}}\",\n    \"name\":\"Test_name-40ca1eb2-f206-4aea-b2b1-d12f626c93e4\",\n    \"mimeType\":\"image/jpeg\",\n    \"parentFolderPath\":\"/files\",\n    \"constraints\":null\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of file objects",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects?_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}&id={{fileId0}}&download=repr",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects"
							],
							"query": [
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								},
								{
									"key": "id",
									"value": "{{fileId0}}"
								},
								{
									"key": "download",
									"value": "repr"
								}
							]
						},
						"description": "Returns a list of file objects"
					},
					"response": []
				},
				{
					"name": "Update file object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the member ref id variable",
									"    pm.collectionVariables.set(\"fileName\".concat([i]), requestJson[i].name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\":\"{{fileId0}}\",\n        \"customFields\":null,\n        \"tags\":null,\n        \"metadata\":{\"63b2bd6e-239e-47b9-b5c6-bdc71789c7a6\":\"bca1e8b4-4e7d-4d9c-8e40-dabc05f32c3a\"},\n        \"repositoryId\":\"lWJD2n8BnFyrDQJtjDMp\",\n        \"name\":\"update_Test_name-b0178198-d11f-4b66-9c9d-08a4dfd7fb94\",\n        \"mimeType\":\"image/jpeg\",\n        \"parentFolderPath\":\"/files\",\n        \"constraints\":null\n        }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get file objects by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"mimeType\",\n            \"queryValues\": [\n                \"inode/directory\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects/query?id={{fileId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects",
								"query"
							],
							"query": [
								{
									"key": "id",
									"value": "{{fileId0}}"
								}
							]
						},
						"description": "Retrieve file objects by query"
					},
					"response": []
				},
				{
					"name": "Upload file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the file id",
									"    pm.collectionVariables.set(\"fileId\".concat([i]), responseJson.results[i].id);",
									"    pm.collectionVariables.set(\"fileUploadExternalReference\".concat([i]), responseJson.results[i].externalReference);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "customFields",
									"value": "null",
									"contentType": "application/json",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "null",
									"contentType": "application/json",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "null",
									"contentType": "application/json",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "parentFolderPath",
									"value": "/achievement-icons",
									"description": "undefined",
									"type": "text"
								},
								{
									"key": "files",
									"contentType": "multipart/form-data",
									"description": "undefined",
									"type": "file",
									"src": "/home/given/Pictures/Screenshot from 2022-03-08 11-28-22.png"
								},
								{
									"key": "repositoryId",
									"value": "{{repositoryId0}}",
									"description": "undefined",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects/upload",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects",
								"upload"
							]
						},
						"description": "Create or update file objects and binaries in your Ziqni space"
					},
					"response": []
				},
				{
					"name": "Download",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects/download?path={{fileUploadExternalReference0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects",
								"download"
							],
							"query": [
								{
									"key": "path",
									"value": "{{fileUploadExternalReference0}}",
									"description": "The canonical path of the file to download"
								}
							]
						},
						"description": "Download file objects from your Ziqni space"
					},
					"response": []
				},
				{
					"name": "Delete file object by id",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects?id={{fileId0}}&permanent=true",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects"
							],
							"query": [
								{
									"key": "id",
									"value": "{{fileId0}}"
								},
								{
									"key": "permanent",
									"value": "true",
									"description": "Permanently delete the file object. Default is false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete file objects by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{fileName0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-objects/delete?id={{fileId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-objects",
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "{{fileId0}}"
								}
							]
						},
						"description": "Delete file objects by query"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"customFields\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"tags\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"repositoryId\": \"sample\",\n    \"name\": \"First-upload-file-sample.png\",\n    \"mimeType\": \"application/vnd.png\",\n    \"parentFolderPath\": \"/achievement-icons\",\n    \"constraints\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/files/copy?id=eiusmod sed c&id=deserunt",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"files",
								"copy"
							],
							"query": [
								{
									"key": "id",
									"value": "eiusmod sed c",
									"description": "The unique identifiers of the resources"
								},
								{
									"key": "id",
									"value": "deserunt",
									"description": "The unique identifiers of the resources"
								}
							]
						},
						"description": "Copy an existing file object"
					},
					"response": []
				}
			]
		},
		{
			"name": "languages",
			"item": [
				{
					"name": "Create languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the key",
									"    pm.collectionVariables.set(\"languageKey\".concat([i]), requestJson[i].key);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"languageId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"413acc2a-914b-4214-8287-72c3a3bb3440=c749ec30-0c54-474e-8e34-e86c210480a2\":\"meta value\"\n        },\n    \"key\": \"ady\"\n},\n    {\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"413acc2a-914b-4214-8287-72c3a3bb3440=c749ec30-0c54-474e-8e34-e86c210480a2\":\"meta value\"\n        },\n    \"key\": \"ae\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages"
							]
						},
						"description": "Create a new Language in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get list of all languages",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages/available?_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages",
								"available"
							],
							"query": [
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of all avaialable Languages"
					},
					"response": []
				},
				{
					"name": "Get languages",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages?id={{languageId0}},{{languageId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "id",
									"value": "{{languageId0}},{{languageId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Languages available in the space. This assumes that languages have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update languages",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"id\":\"{{languageId0}}\",\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"413acc2a-914b-4214-8287-72c3a3bb3440=c749ec30-0c54-474e-8e34-e86c210480a2\":\"updated meta value\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages"
							]
						},
						"description": "Update an existing Language in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get languages by query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{languageKey0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages",
								"query"
							]
						},
						"description": "Retrieve Languages from Ziqni database by unique Language ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete languages",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages?id={{languageId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "id",
									"value": "{{languageId0}}"
								}
							]
						},
						"description": "Delete Languages for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete languages by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{languageKey1}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/languages/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"languages",
								"delete"
							]
						},
						"description": "Delete Languages from Ziqni database by unique Language ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "members",
			"item": [
				{
					"name": "Create members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"memberName\".concat([i]), requestJson[i].name);",
									"    // set the member reference id",
									"    pm.collectionVariables.set(\"memberRefId\".concat([i]), requestJson[i].memberRefId);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the member id",
									"    pm.collectionVariables.set(\"memberId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"name\": \"name\",\n    \"memberRefId\": \"1000156\",\n    \"memberType\": \"Individual\",\n    \"teamMembers\": null,\n    \"addConstraints\": [\n        \"disabled\"\n    ],\n    \"customFields\": {\n        \"test_cf_term7b021076-e317-4074-9028-9e33af2f7956\": \"customFieldValue1\"\n    },\n    \"metadata\": {},\n    \"tags\": null\n},\n{\n    \"name\": \"name1\",\n    \"memberRefId\": \"1000254\",\n    \"memberType\": \"Individual\",\n    \"teamMembers\": null,\n    \"addConstraints\": [\n        \"disabled\"\n    ],\n    \"customFields\": {\n        \"test_cf_term7b021076-e317-4074-9028-9e33af2f7956\": \"customFieldValue1\"\n    },\n    \"metadata\": {},\n    \"tags\": null\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members"
							]
						},
						"description": "Create new Members in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get members",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members?id={{memberId0}},{{memberId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members"
							],
							"query": [
								{
									"key": "id",
									"value": "{{memberId0}},{{memberId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"memberName0\", requestJson[0].name);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{memberId0}}\",\n        \"name\": \"updated name\",\n        \"memberType\": \"Individual\",\n        \"teamMembers\": [],\n        \"addConstraints\": [\n            \"disabled\"\n        ],\n        \"customFields\": {\n            \"test_cf_term7b021076-e317-4074-9028-9e33af2f7956\": \"customFieldValue1\"\n        },\n        \"metadata\": {\n            \"metaKey1\": \"metaValue1\",\n            \"metaKey2\": \"metaValue2\"\n        },\n        \"tags\": [\n            \"ziqniTagId\",\n            \"ziqniTagId\"\n        ]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members"
							]
						},
						"description": "Update existing Members in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get members by ref id",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members/find-by-ref-identifiers?refIds={{memberRefId0}}, {{memberRefId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members",
								"find-by-ref-identifiers"
							],
							"query": [
								{
									"key": "refIds",
									"value": "{{memberRefId0}}, {{memberRefId1}}",
									"description": "The reference ids  of the resources"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get members by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{memberName1}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members",
								"query"
							]
						},
						"description": "Retrieve Members from Ziqni database by unique Member ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete members",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members?id={{memberId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members"
							],
							"query": [
								{
									"key": "id",
									"value": "{{memberId0}}"
								}
							]
						},
						"description": "Delete Members for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete members by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"memberRefId\",\n            \"queryValues\": [\n                \"{{memberRefId1}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/members/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"members",
								"delete"
							]
						},
						"description": "Delete Members from Ziqni database by unique Members ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "member-messages",
			"item": [
				{
					"name": "Create member messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"memberMessageMessageType\".concat([i]), requestJson[i].messageType);",
									"    // set the member reference id",
									"    // pm.collectionVariables.set(\"memberRefId\".concat([i]), requestJson[i].memberRefId);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the member message id",
									"    pm.collectionVariables.set(\"memberMessageId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"customFields\":{},\n        \"tags\":null,\n        \"metadata\":null,\n        \"eventRefType\":\"Achievement\",\n        \"eventRefId\":null,\n        \"messageType\":\"Achievement\",\n        \"subject\":\"Test_subject\",\n        \"body\":\"Test_body\",\n        \"prize\":null,\n        \"status\":\"Actioned\",\n        \"expiry\":null,\n        \"memberId\":[],\n        \"translations\":[],\n        \"translatableFields\":null\n        },\n    {\n        \"customFields\":{},\n        \"tags\":null,\n        \"metadata\":null,\n        \"eventRefType\":\"Achievement\",\n        \"eventRefId\":null,\n        \"messageType\":\"Achievement\",\n        \"subject\":\"Test_subject\",\n        \"body\":\"Test_body\",\n        \"prize\":null,\n        \"status\":\"Actioned\",\n        \"expiry\":null,\n        \"memberId\":[],\n        \"translations\":[],\n        \"translatableFields\":null\n        }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/member-messages",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"member-messages"
							]
						},
						"description": "Create Member Messages in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get member messages",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/member-messages?id={{memberMessageId0}},{{memberMessageId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"member-messages"
							],
							"query": [
								{
									"key": "id",
									"value": "{{memberMessageId0}},{{memberMessageId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Member Messages. This assumes that Messages have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get member messages by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"messageType\",\n            \"queryValues\": [\n                \"{{memberMessageMessageType0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/member-messages/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"member-messages",
								"query"
							]
						},
						"description": "Retrieve Member Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete member messages",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/member-messages?id={{memberMessageId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"member-messages"
							],
							"query": [
								{
									"key": "id",
									"value": "{{memberMessageId0}}"
								}
							]
						},
						"description": "Delete Member Messages for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete member messages by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"messageType\",\n            \"queryValues\": [\n                \"{{memberMessageMessageType0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/member-messages/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"member-messages",
								"delete"
							]
						},
						"description": "Delete Member Messages by query."
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/member-messages/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"member-messages",
								"state"
							]
						},
						"description": "Update the Member Message status"
					},
					"response": []
				}
			]
		},
		{
			"name": "notifications",
			"item": [
				{
					"name": "Create notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"notificationMessageType\".concat([i]), requestJson[i].messageType);",
									"    // set the member reference id",
									"    // pm.collectionVariables.set(\"memberRefId\".concat([i]), requestJson[i].memberRefId);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the notification message id",
									"    pm.collectionVariables.set(\"notificationId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"customFields\":{},\n        \"tags\":null,\n        \"metadata\":null,\n        \"messageType\":\"Achievement\",\n        \"subject\":\"Test_subject\",\n        \"body\":\"Test_body\",\n        \"status\":\"Actioned\",\n        \"translations\":[],\n        \"translatableFields\":null,\n        \"memberGroup\":null,\n        \"memberId\":[],\n        \"scheduling\":null,\n        \"constraints\":[]\n        },\n    {\n        \"customFields\":{},\n        \"tags\":null,\n        \"metadata\":null,\n        \"messageType\":\"Achievement\",\n        \"subject\":\"Test_subject\",\n        \"body\":\"Test_body\",\n        \"status\":\"Actioned\",\n        \"translations\":[],\n        \"translatableFields\":null,\n        \"memberGroup\":null,\n        \"memberId\":[],\n        \"scheduling\":null,\n        \"constraints\":[]\n        }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/notifications",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "Create Notification Messages in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get notifications",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/notifications?id={{notificationId0}},{{notificationId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"notifications"
							],
							"query": [
								{
									"key": "id",
									"value": "{{notificationId0}},{{notificationId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Notification Messages. This assumes that Messages have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get notifications by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"messageType\",\n            \"queryValues\": [\n                \"{{notificationMessageType0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/notifications/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"notifications",
								"query"
							]
						},
						"description": "Retrieve Notification Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete notifications",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/notifications?id={{notificationId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"notifications"
							],
							"query": [
								{
									"key": "id",
									"value": "{{notificationId0}}"
								}
							]
						},
						"description": "Delete Notification Messages for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete notifications by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"messageType\",\n            \"queryValues\": [\n                \"{{notificationMessageType0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/notifications/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"notifications",
								"delete"
							]
						},
						"description": "Delete Notification Messages from Ziqni database by unique message ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/notifications/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"notifications",
								"state"
							]
						},
						"description": "Update the Notification Message status"
					},
					"response": []
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Create products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"productName\".concat([i]), requestJson[i].name);",
									"    // set the product reference id",
									"    pm.collectionVariables.set(\"productRefId\".concat([i]), requestJson[i].productRefId);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"productId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "challengeAlgorithm",
									"value": "S256",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"tags\": null,\n        \"productRefId\": \"10010\",\n        \"name\": \"test1\",\n        \"description\": null,\n        \"adjustmentFactor\": 1.0,\n        \"actionTypeAdjustmentFactors\": [],\n        \"customFields\": {},\n        \"metadata\": {},\n        \"translations\": [\n            {\n                \"languageKey\": \"ady\",\n                \"translations\": [\n                    {\n                        \"fieldName\": \"name\",\n                        \"text\": \"test1\"\n                    }\n                ]\n            },\n            {\n                \"languageKey\": \"ae\",\n                \"translations\": [\n                    {\n                        \"fieldName\": \"name\",\n                        \"text\": \"test-temp\"\n                    }\n                ]\n            },\n            {\n                \"languageKey\": \"mdf\",\n                \"translations\": [\n                    {\n                        \"fieldName\": \"name\",\n                        \"text\": \"Level-Up\"\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"tags\": null,\n        \"productRefId\": \"10009\",\n        \"name\": \"test1\",\n        \"description\": null,\n        \"adjustmentFactor\": 1.0,\n        \"actionTypeAdjustmentFactors\": [],\n        \"customFields\": {},\n        \"metadata\": {},\n        \"translations\": [\n            {\n                \"languageKey\": \"ady\",\n                \"translations\": [\n                    {\n                        \"fieldName\": \"name\",\n                        \"text\": \"test1\"\n                    }\n                ]\n            },\n            {\n                \"languageKey\": \"ae\",\n                \"translations\": [\n                    {\n                        \"fieldName\": \"name\",\n                        \"text\": \"test-temp\"\n                    }\n                ]\n            },\n            {\n                \"languageKey\": \"mdf\",\n                \"translations\": [\n                    {\n                        \"fieldName\": \"name\",\n                        \"text\": \"Level-Up\"\n                    }\n                ]\n            }\n        ]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Use this endpoint to create products.\n\nThe request body accepts a list of CreateProductRequest."
					},
					"response": []
				},
				{
					"name": "Get products",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "challengeAlgorithm",
									"value": "S256",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products?id={{productId0}},{{productId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "id",
									"value": "{{productId0}},{{productId1}}",
									"description": "The unique identifiers for products"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the number of records to return"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of products."
					},
					"response": []
				},
				{
					"name": "Update products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"productName0\", requestJson[0].name);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{productId0}}\",\n        \"metadata\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n        },\n        \"tags\": [],\n        \"customFields\": {\n            \"customField1\": \"customFieldValue1\",\n            \"customField2\": \"customFieldValue2\"\n        },\n        \"name\": \"new-name\",\n        \"description\": \"new-description\",\n        \"adjustmentFactor\": 28.55,\n        \"actionTypeAdjustmentFactors\": []\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Update existing products."
					},
					"response": []
				},
				{
					"name": "Get products by reference ids",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products/find-by-ref-identifiers/?refIds={{productRefId0}},{{productRefId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products",
								"find-by-ref-identifiers",
								""
							],
							"query": [
								{
									"key": "refIds",
									"value": "{{productRefId0}},{{productRefId1}}",
									"description": "The reference ids  of products"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Get products by using their reference ids."
					},
					"response": []
				},
				{
					"name": "Get products by query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": null,\n    \"mustNot\": null,\n    \"should\": null,\n    \"gte\": null,\n    \"gt\": null,\n    \"lte\": null,\n    \"lt\": null,\n    \"range\": null,\n    \"sortBy\": null,\n    \"multiFields\": [\n        {\n            \"queryFields\": [\n                \"id\",\n                \"spaceName\",\n                \"name\",\n                \"productRefId\",\n                \"description\",\n                \"adjustmentFactor\",\n                \"actionTypeAdjustmentFactors\",\n                \"metadata\",\n                \"tags\",\n                \"customFields\"\n            ],\n            \"queryValue\": \"bmct4H8BBjRG_vvgjb0V\"\n        }\n    ],\n    \"includeFields\": null,\n    \"hasValue\": null,\n    \"hasNoValue\": null,\n    \"shouldMatch\": null,\n    \"skip\": null,\n    \"limit\": null,\n    \"constraints\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products",
								"query"
							]
						},
						"description": "Retrieve Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete products",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products?id={{productId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "id",
									"value": "{{productId0}}",
									"description": "The unique identifiers for products"
								}
							]
						},
						"description": "Delete products for specified identifiers."
					},
					"response": []
				},
				{
					"name": "Delete products by query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"productRefId\",\n            \"queryValues\": [\n                \"{{productRefId1}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/products/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"products",
								"delete"
							]
						},
						"description": "Delete Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			],
			"description": "Products API enables you to manage products in Ziqni."
		},
		{
			"name": "repositories",
			"item": [
				{
					"name": "Create file object repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"repositoryName\".concat([i]), requestJson[i].name);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"repositoryId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n     {\n         \"customFields\": {\n        \"test_cf_term7b021076-e317-4074-9028-9e33af2f7956\": \"customFieldValue1\"\n            },\n         \"tags\": null,\n         \"metadata\":{\n             \"02e5273d-795c-4907-beef-f765753300d4\": \"cae11468-b923-4ba8-9d3c-339ea903098d\"\n             },\n        \"name\": \"Test_name-223645ab-cb7b-49da-9ad8-aed0eb870121\",\n        \"description\": \"Test Description\",\n        \"constraints\": [\n            \"isPublic\", \"isSystem\"\n            ],\n        \"hostingOptions\": {\n            \"indexFileName\": \"index_file_name\",\n            \"errorFileName\": \"error_file_name\"\n    }\n},\n{\n         \"customFields\": {\n        \"test_cf_term7b021076-e317-4074-9028-9e33af2f7956\": \"customFieldValue1\"\n            },\n         \"tags\": null,\n         \"metadata\":{\n             \"02e5273d-795c-4907-beef-f765753300d4\": \"cae11468-b923-4ba8-9d3c-339ea903098d\"\n             },\n        \"name\": \"1Test_name-223645ab-cb7b-49da-9ad8-jakafdasjdzc\",\n        \"description\": \"Test Description\",\n        \"constraints\": [\n            \"isPublic\", \"isSystem\"\n            ],\n        \"hostingOptions\": {\n            \"indexFileName\": \"index_file_name\",\n            \"errorFileName\": \"error_file_name\"\n    }\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/file-repositories",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"file-repositories"
							]
						},
						"description": "Create a new file object repository in your Ziqni space"
					},
					"response": []
				},
				{
					"name": "Get list of file object repositories",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/repositories?id={{repositoryId0}},{{repositoryId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"repositories"
							],
							"query": [
								{
									"key": "id",
									"value": "{{repositoryId0}},{{repositoryId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of file object repositories. This assumes that repositories have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update file object repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"repositoryName0\", requestJson[0].name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{repositoryId0}}\",\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": null,\n        \"name\": \"Updated Name\",\n        \"description\": null,\n        \"addConstraints\": null,\n        \"removeConstraints\": [\n            \"isPublic\"\n            ],\n        \"hostingOptions\": null\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/repositories",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"repositories"
							]
						},
						"description": "Update a file object repository in your Ziqni space."
					},
					"response": []
				},
				{
					"name": "Get file object repositories by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{repositoryName0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/repositories/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"repositories",
								"query"
							]
						},
						"description": "Find file object repositories by query"
					},
					"response": []
				},
				{
					"name": "Delete file object repository by id",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/repositories?id={{repositoryId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"repositories"
							],
							"query": [
								{
									"key": "id",
									"value": "{{repositoryId0}}"
								}
							]
						},
						"description": "Delete the file repository for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete file repositories by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{repositoryName1}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/repositories/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"repositories",
								"delete"
							]
						},
						"description": "Delete repositories nby query. Delete repositories by query and/or unique repository ID's or any other body parameters"
					},
					"response": []
				}
			]
		},
		{
			"name": "rewards",
			"item": [
				{
					"name": "Create rewards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"rewardName\".concat([i]), requestJson[i].name);",
									"    // set the product reference id",
									"    pm.collectionVariables.set(\"rewardEntityId\".concat([i]), requestJson[i].entityId);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"rewardId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"1c71c74d-0085-4b91-b2a2-e8dca1147311\" : \"Meta Value\"},\n        \"entityType\": \"Achievement\",\n        \"entityId\": \"hLZPsX8ByfE0ky4m5slR\",\n        \"name\": \"Test_name-e011c33f-bb76-441d-a37e-95f0704b7e43\",\n        \"description\": \"Test_description\",\n        \"rewardRank\": \"1,2,3,4-10\",\n        \"rewardValue\": 0.7627297482680943,\n        \"icon\": null,\n        \"issueLimit\": null,\n        \"delay\": 100,\n        \"pointInTime\": null,\n        \"period\": 100,\n        \"translations\": null,\n        \"constraints\": [\"memberAcknowledgmentRequired\"],\n        \"rewardTypeId\": \"WopPsX8BMVTzdb9Z3hTw\"\n},\n{\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"1c71c74d-0085-4b91-b2a2-e8dca1147311\":\"ff8ac48c-2598-44be-aec1-81d58d83051e\"},\n        \"entityType\": \"Achievement\",\n        \"entityId\": \"hLZPsX8ByfE0ky4m5slR\",\n        \"name\": \"Test_name-e011c33f-bb76-441d-a37e-95f0704b7e43\",\n        \"description\": \"Test_description\",\n        \"rewardRank\": \"1,2,3,4-10\",\n        \"rewardValue\": 0.7627297482680943,\n        \"icon\": null,\n        \"issueLimit\": null,\n        \"delay\": 100,\n        \"pointInTime\": null,\n        \"period\": 100,\n        \"translations\": null,\n        \"constraints\": [\"memberAcknowledgmentRequired\"],\n        \"rewardTypeId\": \"WopPsX8BMVTzdb9Z3hTw\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards"
							]
						},
						"description": "Create Rewards in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get rewards",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards?id={{rewardId0}},{{rewardId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards"
							],
							"query": [
								{
									"key": "id",
									"value": "{{rewardId0}},{{rewardId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Rewards. This assumes that rewards have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update rewards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"repositoryName0\", requestJson[0].name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{rewardId0}}\",\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"7e66b018-8493-46b0-aebe-f09c2997a4ee\":\"4be06b16-4f83-4ca1-8738-832193324755\"\n            },\n        \"entityType\": \"Achievement\",\n        \"entityId\": \"hLZPsX8ByfE0ky4m5slR\",\n        \"name\": null,\n        \"description\": \"Test_update_description\",\n        \"rewardRank\": null,\n        \"rewardValue\": 100.0,\n        \"icon\": null,\n        \"issueLimit\": 1,\n        \"delay\": 2,\n        \"pointInTime\": \"2022-03-23T15:32:19.58+02:00\",\n        \"period\": null,\n        \"translations\": null,\n        \"addConstraints\": [\n            \"memberAcknowledgmentRequired\"\n        ],\n        \"removeConstraints\": null,\n        \"rewardTypeId\": \"WopPsX8BMVTzdb9Z3hTw\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards"
							]
						},
						"description": "Update a file object repository in your Ziqni space."
					},
					"response": []
				},
				{
					"name": "Get rewards by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"entityId\",\n            \"queryValues\": [\n                \"{{rewardEntityId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards",
								"query"
							]
						},
						"description": "Retrieve Rewards from Ziqni database by unique Rewards ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete rewards",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards?id={{rewardId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards"
							],
							"query": [
								{
									"key": "id",
									"value": "{{rewardId0}}"
								}
							]
						},
						"description": "Delete Rewards for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete rewards by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"entityId\",\n            \"queryValues\": [\n                \"{{rewardEntityId0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards",
								"delete"
							]
						},
						"description": "Delete Rewards from Ziqni database by unique Rewards ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards/contests/:id?_limit=-48278460&_skip=-48278460",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards",
								"contests",
								":id"
							],
							"query": [
								{
									"key": "_limit",
									"value": "-48278460",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "-48278460",
									"description": "Skip the returned records found and return the next batch of records"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "repr",
									"description": "(Required) Unique identifier of the resource"
								}
							]
						},
						"description": "Returns a list of rewards for a contest identifier provided. This assumes that rewards have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rewards/achievements/:id?_limit=-48278460&_skip=-48278460",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rewards",
								"achievements",
								":id"
							],
							"query": [
								{
									"key": "_limit",
									"value": "-48278460",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "-48278460",
									"description": "Skip the returned records found and return the next batch of records"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "repr",
									"description": "(Required) Unique identifier of the resource"
								}
							]
						},
						"description": "Returns a list of Rewards for an Achievement identifier provided. This assumes that rewards have first been uploaded via a POST request or web console"
					},
					"response": []
				}
			]
		},
		{
			"name": "reward-types",
			"item": [
				{
					"name": "Create Reward Types",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n    \"customFields\": {\n        \"test_cf_termd65bcccf-d37f-441a-a96d-d0da55a77719\": [\n            1,\n            2\n        ]\n    },\n    \"tags\": [\n        \"Test_key-7563406f-6983-4308-9422-91838fd40fe7\"\n    ],\n    \"metadata\": {\n        \"fea089d7-f751-432e-8646-838c7769ab1e\": \"f2dfff99-b766-414f-8e33-4d77aebbdb5e\"\n    },\n    \"name\": \"Test_name-b6f072c2-df68-4905-a4f6-c19246ff5dc8\",\n    \"key\": \"Test_key-2148168c-3a6c-48ba-b005-68a67a10aebc\",\n    \"unitOfMeasureType\": \"Other\",\n    \"translations\": [\n        {\n            \"languageKey\": \"csb\",\n            \"translations\": [\n                {\n                    \"fieldName\": \"name\",\n                    \"text\": \"test1\"\n                }\n            ]\n        },\n        {\n            \"languageKey\": \"den\",\n            \"translations\": [\n                {\n                    \"fieldName\": \"name\",\n                    \"text\": \"test-temp\"\n                }\n            ]\n        },\n        {\n            \"languageKey\": \"kmb\",\n            \"translations\": [\n                {\n                    \"fieldName\": \"name\",\n                    \"text\": \"Level-Up\"\n                }\n            ]\n        }\n    ],\n    \"addConstraints\": [\n        \"system\"\n    ]\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/reward-types",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"reward-types"
							]
						},
						"description": "Create new Reward types in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Update Reward Types",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{rewardTypeId1}}\",\n        \"tags\": [\n            \"ziqniTagUpdated\",\n            \"ziqniTagUpdated2\"\n        ],\n        \"customFields\": {\n            \"customField1\": \"customFieldValue1\",\n            \"customField2\": \"customFieldValue2\"\n        },\n        \"metadata\": {\n            \"9359912f-c24a-4c8f-af57-f20dae0676e2\": \"1da96d06-b24a-4faa-91c0-83fdc96f4ed7\"\n        },\n        \"name\": \"updated Name\",\n        \"description\": \"Test_update_description\",\n        \"unitOfMeasureType\": \"Other\",\n        \"addConstraints\": [],\n        \"removeConstraints\": []\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/reward-types",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"reward-types"
							]
						},
						"description": "Update existing Reward types in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get Reward Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/reward-types?id={{rewardTypeId0}}&_limit={{defaultLimit}}&_skip={{defaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"reward-types"
							],
							"query": [
								{
									"key": "id",
									"value": "{{rewardTypeId0}}",
									"description": "The unique identifiers for reward types"
								},
								{
									"key": "_limit",
									"value": "{{defaultLimit}}",
									"description": "Limit the number of records to return"
								},
								{
									"key": "_skip",
									"value": "{{defaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Reward Types. This assumes that reward types have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get Reward Types By Query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{rewardTypeId0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/reward-types/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"reward-types",
								"query"
							]
						},
						"description": "Retrieve Reward types from Ziqni database by unique Reward type ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete Reward Types",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/reward-types?id={{rewardTypeId1}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"reward-types"
							],
							"query": [
								{
									"key": "id",
									"value": "{{rewardTypeId1}}"
								}
							]
						},
						"description": "Delete Reward types for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete Reward Types By Query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{rewardTypeKey0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/reward-types/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"reward-types",
								"delete"
							]
						},
						"description": "Delete Reward types from Ziqni database by unique Reward types ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "rules",
			"item": [
				{
					"name": "Validate rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"ruleId\".concat([i]), requestJson[i].id);",
									"    ",
									"}",
									"",
									"",
									"// // parse response",
									"// var responseJson = JSON.parse(responseBody);",
									"",
									"// // get the length of results",
									"// var responseLength = responseJson.results.length;",
									"// for (i = 0; i < responseLength; i++) {",
									"//     // set the product id",
									"//     pm.collectionVariables.set(\"ruleId\".concat([i]), responseJson.results[i].id);",
									"",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\"id\":\"FRxf0H8Bx_kUxIyMnTfw\",\n    \"rules\":\n        {\n        \"entityId\": null,\n        \"action\": \"Test Action\",\n        \"context\": \"Test Context\",\n        \"rules\": {\n            \"type\": \"expression\",\n            \"mustMatchAll\": true,\n            \"mustEvaluateTo\": true,\n            \"scope\": \"Scope\",\n            \"operand\": \"Operand\",\n            \"operator\": \"Operator\",\n            \"value\": null,\n            \"rules\": null,\n            \"then\": null,\n            \"lineNumber\": 1\n        },\n        \"id\": null,\n        \"entityType\": null\n    }\n            },\n    {\"id\":\"GBxg0H8Bx_kUxIyMJjfN\",\n    \"rules\":\n        {\n        \"entityId\": null,\n        \"action\": \"Test Action\",\n        \"context\": \"Test Context\",\n        \"rules\": {\n            \"type\": \"expression\",\n            \"mustMatchAll\": true,\n            \"mustEvaluateTo\": true,\n            \"scope\": \"Scope\",\n            \"operand\": \"Operand\",\n            \"operator\": \"Operator\",\n            \"value\": null,\n            \"rules\": null,\n            \"then\": null,\n            \"lineNumber\": 1\n        },\n        \"id\": null,\n        \"entityType\": null\n    }\n            }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules/validate",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules",
								"validate"
							]
						},
						"description": "Validate rules"
					},
					"response": []
				},
				{
					"name": "Get rules",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules?id={{ruleId0}},{{ruleId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules"
							],
							"query": [
								{
									"key": "id",
									"value": "{{ruleId0}},{{ruleId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of rules. This assumes that rules have first been created during achievement, competition or contest setup. The id is the ID of the entity the rules describe"
					},
					"response": []
				},
				{
					"name": "Update rules",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"FRxf0H8Bx_kUxIyMnTfw\",\n        \"rules\": {\n            \"entityId\": null,\n            \"action\": \"Test Action\",\n            \"context\": \"Test Context\",\n            \"rules\": {\n                \"type\": \"expression\",\n                \"mustMatchAll\": true,\n                \"mustEvaluateTo\": true,\n                \"scope\": \"Scope\",\n                \"operand\": \"Operand\",\n                \"operator\": \"Operator\",\n                \"value\": null,\n                \"rules\": null,\n                \"then\": null,\n                \"lineNumber\": 1\n            },\n            \"id\": null,\n            \"entityType\": null\n        }\n    },\n    {\n        \"id\": \"GBxg0H8Bx_kUxIyMJjfN\",\n        \"rules\": {\n            \"entityId\": null,\n            \"action\": \"Test Action\",\n            \"context\": \"Test Context\",\n            \"rules\": {\n                \"type\": \"expression\",\n                \"mustMatchAll\": true,\n                \"mustEvaluateTo\": true,\n                \"scope\": \"Scope\",\n                \"operand\": \"Operand\",\n                \"operator\": \"Operator\",\n                \"value\": null,\n                \"rules\": null,\n                \"then\": null,\n                \"lineNumber\": 1\n            },\n            \"id\": null,\n            \"entityType\": null\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules"
							]
						},
						"description": "Update existing rules"
					},
					"response": []
				},
				{
					"name": "Get rule schemas",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules/schema?context=contest",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules",
								"schema"
							],
							"query": [
								{
									"key": "context",
									"value": "contest",
									"description": "(Required) The context to retrieve, either achievement, competition or contest"
								}
							]
						},
						"description": "Returns a list of rules. This assumes that rules have first been created during achievement, competition or contest setup"
					},
					"response": []
				},
				{
					"name": "Get rules by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{ruleId1}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules",
								"query"
							]
						},
						"description": "Retrieve Rules from Ziqni database by unique Rewards ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete rules by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"id\",\n            \"queryValues\": [\n                \"{{ruleId0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules",
								"delete"
							]
						},
						"description": "Delete Rules from Ziqni database by unique Rules ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"context\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"searchText\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"skip\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"limit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"constraints\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    {\n        \"context\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"searchText\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"skip\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"limit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"constraints\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/rules/operand-lookup",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"rules",
								"operand-lookup"
							]
						},
						"description": "Search or get rule operand values"
					},
					"response": []
				}
			]
		},
		{
			"name": "spaces",
			"item": [
				{
					"name": "{space Name}",
					"item": [
						{
							"name": "get Spaces By Name",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"spaces",
										":spaceName"
									],
									"query": [
										{
											"key": "_limit",
											"value": "-48278460",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "-48278460",
											"description": "Skip the returned records found and return the next batch of records"
										}
									],
									"variable": [
										{
											"key": "spaceName",
											"value": "repr",
											"description": "(Required) This is the space name which is linked to the account"
										}
									]
								},
								"description": "Return a list of sub-spaces for the given Space Name provided"
							},
							"response": [
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of spaces and/or errors",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName?_limit=-48278460&_skip=-48278460",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"query": [
												{
													"key": "_limit",
													"value": "-48278460"
												},
												{
													"key": "_skip",
													"value": "-48278460"
												}
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which is linked to the account"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1,\n  \"skip\": 0,\n  \"limit\": 100\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"spaces",
										":spaceName"
									],
									"variable": [
										{
											"key": "spaceName",
											"value": "repr",
											"description": "(Required) This is the space name which will be deleted"
										}
									]
								},
								"description": "Delete the Space for the given Space Name provided"
							},
							"response": [
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Request Entity Too Large",
									"code": 413,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Not Implemented",
									"code": 501,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								},
								{
									"name": "A list of outcomes and/or errors",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{ziqniAdminApiBaseUrl}}/spaces/:spaceName",
											"host": [
												"{{ziqniAdminApiBaseUrl}}"
											],
											"path": [
												"spaces",
												":spaceName"
											],
											"variable": [
												{
													"key": "spaceName",
													"value": "repr",
													"description": "(Required) This is the space name which will be deleted"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"meta\": {\n  \"resultCount\": 0,\n  \"errorCount\": 1\n },\n \"results\": [],\n \"errors\": [\n  {\n   \"errorCode\": 1007,\n   \"message\": \"The error was caused by an invalid ID being submitted\",\n   \"detail\": []\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Create space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"spaceName\".concat([i]), requestJson[i].name);",
									"",
									"    pm.collectionVariables.set(\"masterSpace\".concat([i]), requestJson[i].masterSpace);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"spaceId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\":\"tesew8226\",\n        \"accountType\":\"Trial\",\n        \"masterSpace\":null,\n        \"unitsOfMeasure\":null,\n        \"constraints\":null\n        },\n    {\n        \"name\":\"tesew8227\",\n        \"accountType\":\"Trial\",\n        \"masterSpace\":null,\n        \"unitsOfMeasure\":null,\n        \"constraints\":null\n        }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/spaces",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"spaces"
							]
						},
						"description": "Create a new Space for the user in the Ziqni"
					},
					"response": []
				},
				{
					"name": "Get space infromation",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/spaces?name={{spaceName0}},{{spaceName1}}_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"spaces"
							],
							"query": [
								{
									"key": "name",
									"value": "{{spaceName0}},{{spaceName1}}_limit={{ziqniDefaultLimit}}"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Spaces for the current session"
					},
					"response": []
				},
				{
					"name": "Update space",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountType\": \"company\",\n    \"masterSpace\": \"sc1samQmVr61KgaPQq7x\",\n    \"unitsOfMeasure\": null,\n    \"constraints\": [\n        \"proident dolore\",\n        \"ea magna\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/spaces",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"spaces"
							]
						},
						"description": "Update a  Space for the user in the Ziqni"
					},
					"response": []
				},
				{
					"name": "Delete space by space name",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/spaces?name={{spaceName0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"spaces"
							],
							"query": [
								{
									"key": "name",
									"value": "{{spaceName0}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "Create tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"tagName\".concat([i]), requestJson[i].name);",
									"    // set the product reference id",
									"    pm.collectionVariables.set(\"tagKey\".concat([i]), requestJson[i].key);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"tagId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Test_name-071e4a59-6f07-4085-b1bb-9c6239f8148c12\",\n        \"key\": \"Test_key-deef82e9-b34f-4636-a614-92fa3807ecwyetriufdgf\",\n        \"description\": \"Test Description\",\n        \"metadata\": {\n            \"MetaKey\": \"MetaValue\"\n        },\n        \"entityTypes\": [\n            \"Member\"\n        ]\n    },\n    {\n        \"name\": \"Test_name-071e4a59-6f07-4085-b1bb-9c6239f8354\",\n        \"key\": \"Test_key-deef82e9-b34f-4636-a614-92fa3807ecsgdhfdhgfdhh\",\n        \"description\": \"Test Description\",\n        \"metadata\": {\n            \"MetaKey\": \"MetaValue\"\n        },\n        \"entityTypes\": [\n            \"Product\"\n        ]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/tags",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"tags"
							]
						},
						"description": "Create new Tags in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Update tags",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\":\"{{tagId0}}\",\n        \"name\":null,\n        \"description\":\"Test_update_description\",\n        \"entityTypes\":[],\n        \"metadata\":null\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/tags",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"tags"
							]
						},
						"description": "Update existing Tags in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get tags",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/tags?id={{tagId0}}, {{tagId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"tags"
							],
							"query": [
								{
									"key": "id",
									"value": "{{tagId0}}, {{tagId1}}",
									"description": "The unique identifiers of the resources"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Tags. This assumes that tags have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get tags by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{tagKey0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/tags/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"tags",
								"query"
							]
						},
						"description": "Retrieve Tags from Ziqni database by unique Tags ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete tags",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/tags?id={{tagId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"tags"
							],
							"query": [
								{
									"key": "id",
									"value": "{{tagId0}}"
								}
							]
						},
						"description": "Delete Tags for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete tags by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{tagKey0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/tags/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"tags",
								"delete"
							]
						},
						"description": "Delete Tags from Ziqni database by unique Tags ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "transformers",
			"item": [
				{
					"name": "Create transformers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"transformerName\".concat([i]), requestJson[i].name);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the transformer id",
									"    pm.collectionVariables.set(\"transformerId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\":\"Test_name-976adc26-4537-49f7-a027-03fbb2d8ec1d\",\n        \"source\":\"/***\\n  *  Copyright (C) Competition Labs Ltd - All Rights Reserved\\n  *  Unauthorized copying of this file, via any medium is strictly prohibited\\n  *  Proprietary and confidential\\n  *  Written by Competition Labs Ltd, 2021\\n  */\\n\\n//package com.sabai99.staging\\n\\nimport com.ziqni.transformers.domain._\\nimport com.ziqni.transformers.{ZiqniApi, Json, ZiqniMqTransformer}\\nimport org.joda.time.format.DateTimeFormatter\\nimport org.joda.time.{DateTime, DateTimeZone}\\nimport org.json4s.{DefaultFormats, JArray, JValue, JsonAST}\\n\\nimport java.util.TimeZone\\n\\nclass Sabai99StgMQTrans extends ZiqniMqTransformer {\\n\\n\\tTimeZone.setDefault(DateTimeZone.UTC.toTimeZone)\\n\\tSystem.setProperty(\\\"user.timezone\\\", \\\"UTC\\\")\\n\\tTimeZone.setDefault(null)\\n\\tTimeZone.setDefault(TimeZone.getTimeZone(\\\"UTC\\\"))\\n\\n\\tprivate implicit val formats: DefaultFormats.type = DefaultFormats\\n\\n\\tprivate val VERSION = \\\"v7.3\\\"\\n\\n\\tprivate val DEFAULT_CURRENCY = \\\"thb\\\"\\n\\n\\t// event model types\\n\\tprivate val ACCOUNTS = \\\"ACCOUNTS\\\"\\n\\tprivate val ACCOUNTS_MAPPING = \\\"ACCOUNTS_MAPPING\\\"\\n\\tprivate val LOGIN_LOG = \\\"LOGIN_LOG\\\"\\n\\tprivate val WALLET_TRANSFER_APPLY = \\\"WALLET_TRANSFER_APPLY\\\"\\n\\tprivate val BET_LOG = \\\"BET_LOG\\\"\\n\\n\\t// JSON field maps\\n\\tprivate val BET_ACTION = \\\"bet\\\"\\n\\tprivate val PAYOUT = \\\"payout\\\"\\n\\tprivate val SETTLE = \\\"SETTLE\\\"\\n\\tprivate val SETTLE_BET = \\\"SETTLE_BET\\\"\\n\\tprivate val RESULT = \\\"result\\\"\\n\\tprivate val LEVEL = \\\"LEVEL\\\"\\n\\tprivate val NICK_NAME = \\\"NICK_NAME\\\"\\n\\tprivate val MAPPING_UID = \\\"MAPPING_UID\\\"\\n\\tprivate val LOGIN_TIME = \\\"LOGIN_TIME\\\"\\n\\tprivate val TRANSFER_TYPE = \\\"TRANSFER_TYPE\\\"\\n\\tprivate val CANCEL = \\\"CANCEL\\\"\\n\\tprivate val CANCEL_BET = \\\"CANCEL_BET\\\"\\n\\tprivate val ROLLBACK = \\\"ROLLBACK\\\"\\n\\n\\tprivate val ROUTING_KEY = \\\"ROUTING_KEY\\\"\\n\\tprivate val BET_LOG_PP = \\\"BET_LOG_PP\\\"\\n\\tprivate val BET_LOG_PG = \\\"BET_LOG_PG\\\"\\n\\tprivate val BET_LOG_RICH88 = \\\"BET_LOG_RICH88\\\"\\n\\tprivate val BET_LOG_PS_REALTIME = \\\"BET_LOG_PS_REALTIME\\\"\\n\\tprivate val BET_LOG_KP = \\\"BET_LOG_KP\\\"\\n\\tprivate val BET_LOG_MG = \\\"BET_LOG_MG\\\"\\n\\tprivate val BET_LOG_MP = \\\"BET_LOG_MP\\\"\\n\\tprivate val BET_LOG_SG = \\\"BET_LOG_SG\\\"\\n\\tprivate val BET_LOG_HABA = \\\"BET_LOG_HABA\\\"\\n\\tprivate val BET_LOG_SEXY_RT = \\\"BET_LOG_SEXY_RT\\\"\\n\\tprivate val BET_LOG_ICG = \\\"BET_LOG_ICG\\\"\\n\\tprivate val BET_LOG_ICG_REALTIME = \\\"BET_LOG_ICG_REALTIME\\\"\\n\\tprivate val BET_LOG_JDB = \\\"BET_LOG_JDB\\\"\\n\\tprivate val BET_LOG_UPG = \\\"BET_LOG_UPG\\\"\\n\\tprivate val BET_LOG_SLOTXO = \\\"BET_LOG_SLOTXO\\\"\\n\\n\\tprivate val TURNOVER_BET_LOG = Seq(\\\"BET_LOG_FC\\\", \\\"BET_LOG_RSG\\\", \\\"BET_LOG_CQ9\\\", \\\"BET_LOG_MG\\\", \\\"BET_LOG_JILI\\\", \\\"BET_LOG_PS\\\")\\n\\n\\t// reserved keys\\n\\tprivate val parentMemberRefKey = \\\"parentMemberRef\\\"\\n\\tprivate val betAction = \\\"bet\\\"\\n\\tprivate val winAction = \\\"win\\\"\\n\\tprivate val winMultiplier = \\\"win_multiplier\\\"\\n\\n\\t// level keys\\n\\tprivate val Level_SuperEasy = \\\"Super-Easy\\\"\\n\\tprivate val Level_Normal = \\\"Normal\\\"\\n\\tprivate val Level_Engaged = \\\"Engaged\\\"\\n\\tprivate val Level_VIP = \\\"VIP\\\"\\n\\tprivate val Level_SuperHard = \\\"Super-Hard\\\"\\n\\n\\t// time formats\\n\\tval pattern1: String = \\\"yyyy-MM-dd HH:mm:ss\\\"\\n\\tval pattern2: String = \\\"yyyy-MM-dd'T'HH:mm:ss\\\"\\n\\n\\tval formatShort = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n\\tformatShort.setTimeZone(TimeZone.getTimeZone(\\\"UTC\\\"))\\n\\n\\tval formatShortWithT = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd'T'HH:mm:ss\\\")\\n\\tformatShortWithT.setTimeZone(TimeZone.getTimeZone(\\\"UTC\\\"))\\n\\n\\tval formatLong = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss.SSS\\\")\\n\\tval formatLongWithT = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd'T'HH:mm:ss.SSS\\\")\\n\\n\\tval JodaDateTimeFormatShortFormatter: DateTimeFormatter = org.joda.time.format.DateTimeFormat.forPattern(pattern1)\\n\\tval JodaDateTimeFormatShortWithTFormatter: DateTimeFormatter = org.joda.time.format.DateTimeFormat.forPattern(pattern2)\\n\\n\\tval DATE_FORMAT_REGEXPS = \\\"^\\\\\\\\d{4}-\\\\\\\\d{1,2}-\\\\\\\\d{1,2}\\\\\\\\s\\\\\\\\d{1,2}:\\\\\\\\d{2}:\\\\\\\\d{2}$\\\"\\n\\n\\tprivate def parseShortDateFormat(date: String, competitionLabsApi: ZiqniApi): DateTime = {\\n\\t\\ttry {\\n\\t\\t\\tscala.util.control.Exception.allCatch[DateTime].opt(DateTime.parse(date, JodaDateTimeFormatShortFormatter).withZone(DateTimeZone.UTC)) match {\\n\\t\\t\\t\\tcase Some(d) => d\\n\\t\\t\\t\\tcase None => DateTime.parse(date, JodaDateTimeFormatShortWithTFormatter).withZone(DateTimeZone.UTC)\\n\\t\\t\\t}\\n\\t\\t} catch {\\n\\t\\t\\tcase er: Exception => {\\n\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] [${date}] [${date.matches(DATE_FORMAT_REGEXPS)}] - $VERSION\\\")\\n\\t\\t\\t\\tthrow er\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Handle incoming messages from RabbitMq\\n\\toverride def rabbit(message: Array[Byte], routingKey: String, exchangeName: String, competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\thandleMessage( message, competitionLabsApi, Map(\\\"routingKey\\\" -> routingKey, \\\"exchangeName\\\" -> exchangeName))\\n\\t}\\n\\n\\toverride def apply(message: Array[Byte], competitionLabsApi: ZiqniApi, args: Map[String, Any]): Unit = {\\n\\t\\thandleMessage(message, competitionLabsApi, args)\\n\\t}\\n\\n\\t/* handle different message types */\\n\\tprivate def handleMessage(message: Array[Byte], competitionLabsApi: ZiqniApi, args: Map[String, Any]): Unit = {\\n\\t\\tval messageAsString = competitionLabsApi.convertByteArrayToString(message)\\n//\\t\\tprintln(s\\\"message received [$messageAsString]\\\")\\n\\n\\t\\tval competitionLabsApiProto = competitionLabsApi.asInstanceOf[ZiqniApi]\\n\\t\\ttry {\\n\\t\\t\\tval jsonObj = competitionLabsApiProto.fromJsonString(messageAsString)\\n\\n\\t\\t\\tjsonObj match {\\n\\t\\t\\t\\tcase jArr: JArray => {\\n\\t\\t\\t\\t\\tif (jArr.arr.size > 500)\\n\\t\\t\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApiProto.spaceName}] Recieved events array of size [${jArr.arr.size}] - $VERSION\\\")\\n\\n\\t\\t\\t\\t\\tjArr.arr.foreach(jsonValue => handleIndividualJObject(jsonValue, messageAsString, competitionLabsApiProto))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcase _ => handleIndividualJObject(jsonObj, messageAsString, competitionLabsApiProto)\\n\\t\\t\\t}\\n\\t\\t} catch {\\n\\t\\t\\tcase e: Exception =>\\n\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] failed to parse message ${messageAsString} - $VERSION\\\")\\n\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] ${e.getMessage} - $VERSION\\\")\\n\\t\\t\\t\\te.printStackTrace()\\n\\t\\t}\\n\\t}\\n\\n\\t/** Handle individual JSON object **/\\n\\tprivate def handleIndividualJObject(jsonObj: JValue, messageAsString: String, competitionLabsApi: ZiqniApi): Unit = try {\\n\\t\\thandleBetLogEvents(\\\"BET_LOG\\\", jsonObj, messageAsString, competitionLabsApi)\\n\\n\\t\\t/*\\n\\t\\tval eventType: String = if(Json.keyExists(jsonObj, ROUTING_KEY)){\\n\\t\\t\\tBET_LOG\\n\\t\\t}else if(Json.keyExists(jsonObj, LOGIN_TIME)){\\n\\t\\t\\tLOGIN_LOG\\n\\t\\t}else if(Json.keyExists(jsonObj, MAPPING_UID)){\\n\\t\\t\\tACCOUNTS_MAPPING\\n\\t\\t}else if(Json.keyExists(jsonObj, TRANSFER_TYPE)){\\n\\t\\t\\tWALLET_TRANSFER_APPLY\\n\\t\\t}else if(Json.keyExists(jsonObj, NICK_NAME) && Json.keyExists(jsonObj, LEVEL)){\\n\\t\\t\\tACCOUNTS\\n\\t\\t}else {\\n\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] ${Json.keyExists(jsonObj, NICK_NAME)} ${Json.keyExists(jsonObj, LEVEL)} - $VERSION\\\")\\n\\t\\t\\tthrow new Exception(s\\\"Unrecognised JSON mapping ${jsonObj} - $VERSION\\\")\\n\\t\\t}\\n\\n\\t\\teventType match {\\n\\t\\t\\tcase ACCOUNTS =>\\n\\t\\t\\t\\thandleAccountRegistrationEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase ACCOUNTS_MAPPING =>\\n\\t\\t\\t\\thandleAccountMappingEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase LOGIN_LOG =>\\n\\t\\t\\t\\thandleLoginEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase WALLET_TRANSFER_APPLY =>\\n\\t\\t\\t\\thandleWalletTransferEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase BET_LOG => {\\n\\t\\t\\t\\tval routingKey = Json.getFromJValueAsOption[String]\\t\\t(jsonObj,\\t\\\"ROUTING_KEY\\\").getOrElse(\\\"_nothing\\\")\\n\\t\\t\\t\\tif(routingKey == BET_LOG_PP){\\n\\t\\t\\t\\t\\tppHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_PG){\\n\\t\\t\\t\\t\\tpgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(TURNOVER_BET_LOG.contains(routingKey)){\\n\\t\\t\\t\\t\\tturnoverHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_RICH88){\\n\\t\\t\\t\\t\\trich88HandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_PS_REALTIME){\\n\\t\\t\\t\\t\\tpsRealtimeHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_KP){\\n\\t\\t\\t\\t\\tkpHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_SG){\\n\\t\\t\\t\\t\\tsgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_HABA){\\n\\t\\t\\t\\t\\thabaHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_SEXY_RT){\\n\\t\\t\\t\\t\\tsexyRtHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_ICG_REALTIME){\\n\\t\\t\\t\\t\\ticgRealtimeHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_ICG){\\n\\t\\t\\t\\t\\ticgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_JDB){\\n\\t\\t\\t\\t\\tjdbHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_UPG){\\n\\t\\t\\t\\t\\tupgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_SLOTXO){\\n\\t\\t\\t\\t\\tslotXoHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_MG){\\n\\t\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] MG transformation is not supported - $VERSION\\\")\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_MP){\\n\\t\\t\\t\\t\\tmpHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else\\n\\t\\t\\t\\t\\thandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t}\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tthrow new Exception(s\\\"Message with unknown event type received. [${eventType}]\\\")\\n\\t\\t}\\n\\t\\t*/\\n\\t} catch {\\n\\t\\tcase e: Exception =>\\n\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] [handleIndividualJObject] ${Json.fromJsonToString(jsonObj)} - $VERSION\\\")\\n\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] [handleIndividualJObject] ${e.getMessage} - $VERSION\\\")\\n\\t\\t\\te.printStackTrace()\\n\\t\\t\\tthrow e\\n\\t}\\n\\n\\t/** Handle bet-log/transaction mapping for client KA events */\\n\\tprivate def handleBetLogEvents(eventType: String, jsonObj: JsonAST.JValue, messageAsString: String, competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tval routingKey  \\t\\t    = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"ROUTING_KEY\\\")\\n\\t\\tval gameProvider  \\t\\t    = Json.getFromJValueAsOption[String]\\t\\t(jsonObj,\\t\\\"GAME_PROVIDER\\\")\\n\\t\\tval routingProvider  \\t\\t= if(gameProvider.nonEmpty && gameProvider.get.nonEmpty){gameProvider.get}else{routingKey.split(\\\"BET_LOG_\\\").lastOption.getOrElse(routingKey)}\\n\\t\\tval seqNo  \\t\\t            = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"SEQ_NO\\\")\\n\\t\\tval childMemberRefId        = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"BET_ID\\\")\\n\\t\\tval betTimestamp\\t        = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"BET_TIMESTAMP\\\")\\n\\t\\tval gameTpeId\\t            = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"GAMETYPE_ID\\\")\\n\\t\\tval gameIdKey  \\t            = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"GAME_ID\\\")\\n\\t\\tval gameId  \\t            = routingProvider + \\\".\\\" + gameIdKey\\n\\t\\tval turnover  \\t            = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"TURNOVER\\\")\\n\\t\\tval netWin        \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"NETWIN\\\")\\n\\t\\tval currency       \\t        = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"CURRENCY\\\")\\n\\t\\tval playerDevice \\t        = Json.getFromJValueAsOption[String]\\t\\t(jsonObj,\\t\\\"PLAYER_DEVICE\\\").getOrElse(\\\"\\\")\\n\\t\\tval beforeBalance  \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"BEFORE_BALANCE\\\")\\n\\t\\tval afterBalance  \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"AFTER_BALANCE\\\")\\n\\t\\tval win           \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"WIN\\\")\\n\\t\\tval gameMetadata            = new scala.collection.mutable.HashMap[String, String]()\\n\\t\\tvar gameName                = gameId\\n\\t\\tif(Json.keyExists(jsonObj, \\\"GAME_NAME\\\")){\\n\\t\\t\\tjsonObj.\\\\(\\\"GAME_NAME\\\").mapField{ field =>\\n\\t\\t\\t\\tval label = field._2.extract[String]\\n\\t\\t\\t\\tgameMetadata.put(field._1, label)\\n\\n\\t\\t\\t\\tif(field._1 == \\\"en-US\\\"){\\n\\t\\t\\t\\t\\tgameName = routingProvider + \\\".\\\" + label\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfield\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tval transactionTime = parseShortDateFormat(betTimestamp, competitionLabsApi)\\n\\n\\t\\t// check if member exists as member should have been pre-created using account mapping \\\"ACCOUNTS_MAPPING\\\" registration event\\n//\\t\\tval memberId = Option(\\\"NtASM30B-m1TK8I8_E4D\\\") //getParentMember(childMemberRefId, competitionLabsApi)\\n//\\t\\tif( memberId.nonEmpty ){\\n//\\t\\t\\tval basicMember = competitionLabsApi.getMember(memberId.get).get\\n//\\t\\t\\tval parentMemberRef = basicMember.getMetaData.flatMap(meta => meta.get(parentMemberRefKey))\\n\\n\\t\\t\\t// check if parent member exists as member should have been pre-created using initial account \\\"ACCOUNTS\\\" registration event\\n//\\t\\t\\tif( parentMemberRef.nonEmpty ){\\n\\t\\t\\t\\tval convertedWinAmount = convertToBaseCurrency(currency, win, routingKey.toLowerCase().contains(\\\"rollback\\\"), competitionLabsApi)\\n\\t\\t\\t\\tval convertedNetWinAmount = convertToBaseCurrency(currency, netWin, routingKey.toLowerCase().contains(\\\"rollback\\\"), competitionLabsApi)\\n\\t\\t\\t\\tval convertedTurnoverAmount = convertToBaseCurrency(currency, turnover, routingKey.toLowerCase().contains(\\\"rollback\\\"), competitionLabsApi)\\n\\n\\t\\t\\t\\t// define available custom fields\\n\\t\\t\\t\\tval customFields = Map[String, Seq[Any]](\\n\\t\\t\\t\\t\\tbetAction -> Seq(convertedTurnoverAmount),\\n\\t\\t\\t\\t\\twinAction -> Seq(convertedWinAmount),\\n\\t\\t\\t\\t\\t\\\"netWin\\\" -> Seq(convertedNetWinAmount),\\n\\t\\t\\t\\t\\t\\\"currency\\\" -> Seq(currency),\\n\\t\\t\\t\\t\\t\\\"playerDevice\\\" -> Seq(playerDevice),\\n\\t\\t\\t\\t\\t\\\"gameId\\\" -> Seq(gameId),\\n\\t\\t\\t\\t\\t\\\"beforeBalance\\\" -> Seq(beforeBalance),\\n\\t\\t\\t\\t\\t\\\"afterBalance\\\" -> Seq(afterBalance),\\n\\t\\t\\t\\t\\t\\\"eventType\\\" -> Seq(eventType),\\n\\t\\t\\t\\t\\t\\\"recordDate\\\" -> Seq(DateTime.now().toString)\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tgetOrCreateEventAction(betAction, competitionLabsApi)\\n\\t\\t\\t\\tgetOrCreateEventAction(winAction, competitionLabsApi)\\n\\t\\t\\t\\tgetOrCreateProduct(gameId, gameName, Seq(\\\"KA\\\"), gameTpeId, Option(gameMetadata.toMap), competitionLabsApi) // creation product\\n\\n\\t\\t\\t\\t// bet action event\\n\\t\\t\\t\\tval basicBetEvent = BasicEventModel(\\n\\t\\t\\t\\t\\taction = betAction,\\n\\t\\t\\t\\t\\ttags = Seq.empty,\\n\\t\\t\\t\\t\\teventRefId = seqNo,\\n\\t\\t\\t\\t\\tmemberRefId = childMemberRefId,\\n\\t\\t\\t\\t\\tentityRefId = gameId,\\n\\t\\t\\t\\t\\tbatchId = None,\\n\\t\\t\\t\\t\\tsourceValue = convertedTurnoverAmount,\\n\\t\\t\\t\\t\\tmetadata = customFields.toMap,\\n\\t\\t\\t\\t\\ttransactionTimestamp = transactionTime\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t// win action event\\n\\t\\t\\t\\tval basicWinEvent = BasicEventModel(\\n\\t\\t\\t\\t\\taction = winAction,\\n\\t\\t\\t\\t\\ttags = Seq.empty,\\n\\t\\t\\t\\t\\teventRefId = seqNo,\\n\\t\\t\\t\\t\\tmemberRefId = childMemberRefId,\\n\\t\\t\\t\\t\\tentityRefId = gameId,\\n\\t\\t\\t\\t\\tbatchId = None,\\n\\t\\t\\t\\t\\tsourceValue = convertedWinAmount,\\n\\t\\t\\t\\t\\tmetadata = customFields.toMap,\\n\\t\\t\\t\\t\\ttransactionTimestamp = transactionTime\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t// win_multiplier event if win greater then >0\\n\\t\\t\\t\\tif(convertedWinAmount != 0 && convertedTurnoverAmount != 0) {\\n\\t\\t\\t\\t\\tval winMultiplierValue = convertedWinAmount / convertedTurnoverAmount\\n\\t\\t\\t\\t\\tval basicWinMultiplierEvent = BasicEventModel(\\n\\t\\t\\t\\t\\t\\taction = winMultiplier,\\n\\t\\t\\t\\t\\t\\ttags = Seq.empty,\\n\\t\\t\\t\\t\\t\\teventRefId = seqNo,\\n\\t\\t\\t\\t\\t\\tmemberRefId = childMemberRefId,\\n\\t\\t\\t\\t\\t\\tentityRefId = gameId,\\n\\t\\t\\t\\t\\t\\tbatchId = None,\\n\\t\\t\\t\\t\\t\\tsourceValue = winMultiplierValue,\\n\\t\\t\\t\\t\\t\\tmetadata = customFields.toMap,\\n\\t\\t\\t\\t\\t\\ttransactionTimestamp = transactionTime\\n\\t\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t\\tcompetitionLabsApi.pushEvent(basicWinMultiplierEvent)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcompetitionLabsApi.pushEvent(basicBetEvent)\\n\\t\\t\\t\\tcompetitionLabsApi.pushEvent(basicWinEvent)\\n//\\t\\t\\t}else{\\n//\\t\\t\\t\\t//println(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] Parent Member cannot be found in metadata for member: [${memberId.get}] - $VERSION\\\")\\n//\\t\\t\\t}\\n//\\t\\t}else{\\n//\\t\\t\\t//println(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] Member cannot be found for refId: [$childMemberRefId] - $VERSION\\\")\\n//\\t\\t}\\n\\t}\\n\\n\\t// handle action creation inside in action helpers\\n\\tprivate def getOrCreateEventAction(action: String, competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tif(!competitionLabsApi.eventActionExists(action.toLowerCase))\\n\\t\\t\\tcompetitionLabsApi.createEventAction(action.toLowerCase)\\n\\t}\\n\\n\\t/**\\n\\t  * handles member creation\\n\\t  */\\n\\tprivate def getOrCreateMember(memberRef: String, displayName: Option[String], groups: Seq[String], memberMeta: Option[Map[String, String]], onUpdate: => Unit, onMemberGroupUpdate: Seq[String] => Seq[String], onMemberMetadataUpdate: Option[Map[String, String]] => Option[Map[String, String]], competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tcompetitionLabsApi.memberIdFromMemberRefId(memberRef) match {\\n\\t\\t\\tcase Some(mId) =>\\n\\t\\t\\t\\tonUpdate\\n\\n\\t\\t\\t\\tval member = competitionLabsApi.getMember(mId).get\\n\\n\\t\\t\\t\\t// group update\\n\\t\\t\\t\\tval gToSet = member.getGroups match {\\n\\t\\t\\t\\t\\tcase Some(g) =>\\n\\t\\t\\t\\t\\t\\tonMemberGroupUpdate(g)\\n\\t\\t\\t\\t\\tcase _ =>\\n\\t\\t\\t\\t\\t\\tgroups\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// metadata update\\n\\t\\t\\t\\tval updateMetadata = member.getMetaData match {\\n\\t\\t\\t\\t\\tcase Some(m) =>\\n\\t\\t\\t\\t\\t\\tonMemberMetadataUpdate(Option(m))\\n\\t\\t\\t\\t\\tcase _ =>\\n\\t\\t\\t\\t\\t\\tmemberMeta\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// update member object\\n\\t\\t\\t\\tval displayNameUpdate: String = displayName.getOrElse(member.getDisplayName.getOrElse(\\\"\\\"))\\n\\t\\t\\t\\tcompetitionLabsApi.updateMember(mId, Option(memberRef), Option(displayNameUpdate), Option(gToSet.toArray.distinct), updateMetadata)\\n\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tcompetitionLabsApi.createMember(memberRef, displayName.getOrElse(memberRef), groups.distinct, memberMeta)\\n\\t\\t}\\n\\t}\\n\\n\\t// get member CL ID from reference ID\\n\\tprivate def getParentMember(memberRef: String, competitionLabsApi: ZiqniApi): Option[String] = competitionLabsApi.memberIdFromMemberRefId(memberRef)\\n\\n\\t// handle product creation\\n\\tprivate def getOrCreateProduct(productReferenceId: String, displayName: String, providers: Seq[String], productType: String, metaData: Option[Map[String, String]], competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tcompetitionLabsApi.productIdFromProductRefId(productReferenceId) match {\\n\\t\\t\\tcase Some(pId) =>\\n\\t\\t\\t//else do nothing\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tcompetitionLabsApi.createProduct(productReferenceId, displayName, providers, productType, 1, metaData)\\n\\t\\t}\\n\\t}\\n\\n\\t// handle product creation\\n\\tprivate def updateOrCreateProduct(productReferenceId: String, displayName: String, providers: Seq[String], productType: String, metaData: Option[Map[String, String]], competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tcompetitionLabsApi.productIdFromProductRefId(productReferenceId) match {\\n\\t\\t\\tcase Some(pId) =>\\n\\t\\t\\t\\tcompetitionLabsApi.getProduct(pId).map{ product =>\\n\\t\\t\\t\\t\\tif(product.getName != displayName && displayName.trim.nonEmpty){\\n\\t\\t\\t\\t\\t\\tcompetitionLabsApi.updateProduct(\\n\\t\\t\\t\\t\\t\\t\\tclProductId = product.getClProductId,\\n\\t\\t\\t\\t\\t\\t\\tproductReferenceId = Option(product.getProductReferenceId),\\n\\t\\t\\t\\t\\t\\t\\tdisplayName = Option(displayName),\\n\\t\\t\\t\\t\\t\\t\\tproviders = Option(product.getProviders),\\n\\t\\t\\t\\t\\t\\t\\tproductType = Option(product.getProductType),\\n\\t\\t\\t\\t\\t\\t\\tdefaultAdjustmentFactor = product.getDefaultAdjustmentFactor,\\n\\t\\t\\t\\t\\t\\t\\tmetaData = product.getMetaData\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tcompetitionLabsApi.createProduct(productReferenceId, displayName, providers, productType, 1, metaData)\\n\\t\\t}\\n\\t}\\n\\n\\t// Normalize currency converstions based on account settings\\n\\tprivate def convertToBaseCurrency(currency: String, sourceValue: Double, rollBack: Boolean, competitionLabsApi: ZiqniApi): Double = {\\n\\t\\tval currencyMultiplier = competitionLabsApi.getUoMMultiplierFromKey(currency).getOrElse(1.0)\\n\\t\\tval convertedValue = sourceValue / currencyMultiplier\\n\\t\\tif(rollBack && convertedValue != 0){\\n\\t\\t\\tconvertedValue * (-1)\\n\\t\\t}else\\n\\t\\t\\tconvertedValue\\n\\t}\\n}\\n\\n\",\"sourceLanguage\":\"Scala\"\n        },\n    {\n        \"name\":\"Another_Test_name-976adc26-4537-49f7-a027-2911892318791232gdhdd\",\n        \"source\":\"/***\\n  *  Copyright (C) Competition Labs Ltd - All Rights Reserved\\n  *  Unauthorized copying of this file, via any medium is strictly prohibited\\n  *  Proprietary and confidential\\n  *  Written by Competition Labs Ltd, 2021\\n  */\\n\\n//package com.sabai99.staging\\n\\nimport com.ziqni.transformers.domain._\\nimport com.ziqni.transformers.{ZiqniApi, Json, ZiqniMqTransformer}\\nimport org.joda.time.format.DateTimeFormatter\\nimport org.joda.time.{DateTime, DateTimeZone}\\nimport org.json4s.{DefaultFormats, JArray, JValue, JsonAST}\\n\\nimport java.util.TimeZone\\n\\nclass Sabai99StgMQTrans extends ZiqniMqTransformer {\\n\\n\\tTimeZone.setDefault(DateTimeZone.UTC.toTimeZone)\\n\\tSystem.setProperty(\\\"user.timezone\\\", \\\"UTC\\\")\\n\\tTimeZone.setDefault(null)\\n\\tTimeZone.setDefault(TimeZone.getTimeZone(\\\"UTC\\\"))\\n\\n\\tprivate implicit val formats: DefaultFormats.type = DefaultFormats\\n\\n\\tprivate val VERSION = \\\"v7.3\\\"\\n\\n\\tprivate val DEFAULT_CURRENCY = \\\"thb\\\"\\n\\n\\t// event model types\\n\\tprivate val ACCOUNTS = \\\"ACCOUNTS\\\"\\n\\tprivate val ACCOUNTS_MAPPING = \\\"ACCOUNTS_MAPPING\\\"\\n\\tprivate val LOGIN_LOG = \\\"LOGIN_LOG\\\"\\n\\tprivate val WALLET_TRANSFER_APPLY = \\\"WALLET_TRANSFER_APPLY\\\"\\n\\tprivate val BET_LOG = \\\"BET_LOG\\\"\\n\\n\\t// JSON field maps\\n\\tprivate val BET_ACTION = \\\"bet\\\"\\n\\tprivate val PAYOUT = \\\"payout\\\"\\n\\tprivate val SETTLE = \\\"SETTLE\\\"\\n\\tprivate val SETTLE_BET = \\\"SETTLE_BET\\\"\\n\\tprivate val RESULT = \\\"result\\\"\\n\\tprivate val LEVEL = \\\"LEVEL\\\"\\n\\tprivate val NICK_NAME = \\\"NICK_NAME\\\"\\n\\tprivate val MAPPING_UID = \\\"MAPPING_UID\\\"\\n\\tprivate val LOGIN_TIME = \\\"LOGIN_TIME\\\"\\n\\tprivate val TRANSFER_TYPE = \\\"TRANSFER_TYPE\\\"\\n\\tprivate val CANCEL = \\\"CANCEL\\\"\\n\\tprivate val CANCEL_BET = \\\"CANCEL_BET\\\"\\n\\tprivate val ROLLBACK = \\\"ROLLBACK\\\"\\n\\n\\tprivate val ROUTING_KEY = \\\"ROUTING_KEY\\\"\\n\\tprivate val BET_LOG_PP = \\\"BET_LOG_PP\\\"\\n\\tprivate val BET_LOG_PG = \\\"BET_LOG_PG\\\"\\n\\tprivate val BET_LOG_RICH88 = \\\"BET_LOG_RICH88\\\"\\n\\tprivate val BET_LOG_PS_REALTIME = \\\"BET_LOG_PS_REALTIME\\\"\\n\\tprivate val BET_LOG_KP = \\\"BET_LOG_KP\\\"\\n\\tprivate val BET_LOG_MG = \\\"BET_LOG_MG\\\"\\n\\tprivate val BET_LOG_MP = \\\"BET_LOG_MP\\\"\\n\\tprivate val BET_LOG_SG = \\\"BET_LOG_SG\\\"\\n\\tprivate val BET_LOG_HABA = \\\"BET_LOG_HABA\\\"\\n\\tprivate val BET_LOG_SEXY_RT = \\\"BET_LOG_SEXY_RT\\\"\\n\\tprivate val BET_LOG_ICG = \\\"BET_LOG_ICG\\\"\\n\\tprivate val BET_LOG_ICG_REALTIME = \\\"BET_LOG_ICG_REALTIME\\\"\\n\\tprivate val BET_LOG_JDB = \\\"BET_LOG_JDB\\\"\\n\\tprivate val BET_LOG_UPG = \\\"BET_LOG_UPG\\\"\\n\\tprivate val BET_LOG_SLOTXO = \\\"BET_LOG_SLOTXO\\\"\\n\\n\\tprivate val TURNOVER_BET_LOG = Seq(\\\"BET_LOG_FC\\\", \\\"BET_LOG_RSG\\\", \\\"BET_LOG_CQ9\\\", \\\"BET_LOG_MG\\\", \\\"BET_LOG_JILI\\\", \\\"BET_LOG_PS\\\")\\n\\n\\t// reserved keys\\n\\tprivate val parentMemberRefKey = \\\"parentMemberRef\\\"\\n\\tprivate val betAction = \\\"bet\\\"\\n\\tprivate val winAction = \\\"win\\\"\\n\\tprivate val winMultiplier = \\\"win_multiplier\\\"\\n\\n\\t// level keys\\n\\tprivate val Level_SuperEasy = \\\"Super-Easy\\\"\\n\\tprivate val Level_Normal = \\\"Normal\\\"\\n\\tprivate val Level_Engaged = \\\"Engaged\\\"\\n\\tprivate val Level_VIP = \\\"VIP\\\"\\n\\tprivate val Level_SuperHard = \\\"Super-Hard\\\"\\n\\n\\t// time formats\\n\\tval pattern1: String = \\\"yyyy-MM-dd HH:mm:ss\\\"\\n\\tval pattern2: String = \\\"yyyy-MM-dd'T'HH:mm:ss\\\"\\n\\n\\tval formatShort = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n\\tformatShort.setTimeZone(TimeZone.getTimeZone(\\\"UTC\\\"))\\n\\n\\tval formatShortWithT = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd'T'HH:mm:ss\\\")\\n\\tformatShortWithT.setTimeZone(TimeZone.getTimeZone(\\\"UTC\\\"))\\n\\n\\tval formatLong = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss.SSS\\\")\\n\\tval formatLongWithT = new java.text.SimpleDateFormat(\\\"yyyy-MM-dd'T'HH:mm:ss.SSS\\\")\\n\\n\\tval JodaDateTimeFormatShortFormatter: DateTimeFormatter = org.joda.time.format.DateTimeFormat.forPattern(pattern1)\\n\\tval JodaDateTimeFormatShortWithTFormatter: DateTimeFormatter = org.joda.time.format.DateTimeFormat.forPattern(pattern2)\\n\\n\\tval DATE_FORMAT_REGEXPS = \\\"^\\\\\\\\d{4}-\\\\\\\\d{1,2}-\\\\\\\\d{1,2}\\\\\\\\s\\\\\\\\d{1,2}:\\\\\\\\d{2}:\\\\\\\\d{2}$\\\"\\n\\n\\tprivate def parseShortDateFormat(date: String, competitionLabsApi: ZiqniApi): DateTime = {\\n\\t\\ttry {\\n\\t\\t\\tscala.util.control.Exception.allCatch[DateTime].opt(DateTime.parse(date, JodaDateTimeFormatShortFormatter).withZone(DateTimeZone.UTC)) match {\\n\\t\\t\\t\\tcase Some(d) => d\\n\\t\\t\\t\\tcase None => DateTime.parse(date, JodaDateTimeFormatShortWithTFormatter).withZone(DateTimeZone.UTC)\\n\\t\\t\\t}\\n\\t\\t} catch {\\n\\t\\t\\tcase er: Exception => {\\n\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] [${date}] [${date.matches(DATE_FORMAT_REGEXPS)}] - $VERSION\\\")\\n\\t\\t\\t\\tthrow er\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Handle incoming messages from RabbitMq\\n\\toverride def rabbit(message: Array[Byte], routingKey: String, exchangeName: String, competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\thandleMessage( message, competitionLabsApi, Map(\\\"routingKey\\\" -> routingKey, \\\"exchangeName\\\" -> exchangeName))\\n\\t}\\n\\n\\toverride def apply(message: Array[Byte], competitionLabsApi: ZiqniApi, args: Map[String, Any]): Unit = {\\n\\t\\thandleMessage(message, competitionLabsApi, args)\\n\\t}\\n\\n\\t/* handle different message types */\\n\\tprivate def handleMessage(message: Array[Byte], competitionLabsApi: ZiqniApi, args: Map[String, Any]): Unit = {\\n\\t\\tval messageAsString = competitionLabsApi.convertByteArrayToString(message)\\n//\\t\\tprintln(s\\\"message received [$messageAsString]\\\")\\n\\n\\t\\tval competitionLabsApiProto = competitionLabsApi.asInstanceOf[ZiqniApi]\\n\\t\\ttry {\\n\\t\\t\\tval jsonObj = competitionLabsApiProto.fromJsonString(messageAsString)\\n\\n\\t\\t\\tjsonObj match {\\n\\t\\t\\t\\tcase jArr: JArray => {\\n\\t\\t\\t\\t\\tif (jArr.arr.size > 500)\\n\\t\\t\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApiProto.spaceName}] Recieved events array of size [${jArr.arr.size}] - $VERSION\\\")\\n\\n\\t\\t\\t\\t\\tjArr.arr.foreach(jsonValue => handleIndividualJObject(jsonValue, messageAsString, competitionLabsApiProto))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcase _ => handleIndividualJObject(jsonObj, messageAsString, competitionLabsApiProto)\\n\\t\\t\\t}\\n\\t\\t} catch {\\n\\t\\t\\tcase e: Exception =>\\n\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] failed to parse message ${messageAsString} - $VERSION\\\")\\n\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] ${e.getMessage} - $VERSION\\\")\\n\\t\\t\\t\\te.printStackTrace()\\n\\t\\t}\\n\\t}\\n\\n\\t/** Handle individual JSON object **/\\n\\tprivate def handleIndividualJObject(jsonObj: JValue, messageAsString: String, competitionLabsApi: ZiqniApi): Unit = try {\\n\\t\\thandleBetLogEvents(\\\"BET_LOG\\\", jsonObj, messageAsString, competitionLabsApi)\\n\\n\\t\\t/*\\n\\t\\tval eventType: String = if(Json.keyExists(jsonObj, ROUTING_KEY)){\\n\\t\\t\\tBET_LOG\\n\\t\\t}else if(Json.keyExists(jsonObj, LOGIN_TIME)){\\n\\t\\t\\tLOGIN_LOG\\n\\t\\t}else if(Json.keyExists(jsonObj, MAPPING_UID)){\\n\\t\\t\\tACCOUNTS_MAPPING\\n\\t\\t}else if(Json.keyExists(jsonObj, TRANSFER_TYPE)){\\n\\t\\t\\tWALLET_TRANSFER_APPLY\\n\\t\\t}else if(Json.keyExists(jsonObj, NICK_NAME) && Json.keyExists(jsonObj, LEVEL)){\\n\\t\\t\\tACCOUNTS\\n\\t\\t}else {\\n\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] ${Json.keyExists(jsonObj, NICK_NAME)} ${Json.keyExists(jsonObj, LEVEL)} - $VERSION\\\")\\n\\t\\t\\tthrow new Exception(s\\\"Unrecognised JSON mapping ${jsonObj} - $VERSION\\\")\\n\\t\\t}\\n\\n\\t\\teventType match {\\n\\t\\t\\tcase ACCOUNTS =>\\n\\t\\t\\t\\thandleAccountRegistrationEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase ACCOUNTS_MAPPING =>\\n\\t\\t\\t\\thandleAccountMappingEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase LOGIN_LOG =>\\n\\t\\t\\t\\thandleLoginEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase WALLET_TRANSFER_APPLY =>\\n\\t\\t\\t\\thandleWalletTransferEvents(eventType, jsonObj, competitionLabsApi)\\n\\n\\t\\t\\tcase BET_LOG => {\\n\\t\\t\\t\\tval routingKey = Json.getFromJValueAsOption[String]\\t\\t(jsonObj,\\t\\\"ROUTING_KEY\\\").getOrElse(\\\"_nothing\\\")\\n\\t\\t\\t\\tif(routingKey == BET_LOG_PP){\\n\\t\\t\\t\\t\\tppHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_PG){\\n\\t\\t\\t\\t\\tpgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(TURNOVER_BET_LOG.contains(routingKey)){\\n\\t\\t\\t\\t\\tturnoverHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_RICH88){\\n\\t\\t\\t\\t\\trich88HandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_PS_REALTIME){\\n\\t\\t\\t\\t\\tpsRealtimeHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_KP){\\n\\t\\t\\t\\t\\tkpHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_SG){\\n\\t\\t\\t\\t\\tsgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_HABA){\\n\\t\\t\\t\\t\\thabaHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_SEXY_RT){\\n\\t\\t\\t\\t\\tsexyRtHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_ICG_REALTIME){\\n\\t\\t\\t\\t\\ticgRealtimeHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_ICG){\\n\\t\\t\\t\\t\\ticgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_JDB){\\n\\t\\t\\t\\t\\tjdbHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_UPG){\\n\\t\\t\\t\\t\\tupgHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_SLOTXO){\\n\\t\\t\\t\\t\\tslotXoHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_MG){\\n\\t\\t\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] MG transformation is not supported - $VERSION\\\")\\n\\t\\t\\t\\t}else if(routingKey == BET_LOG_MP){\\n\\t\\t\\t\\t\\tmpHandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t\\t}else\\n\\t\\t\\t\\t\\thandleBetLogEvents(eventType, jsonObj, messageAsString, competitionLabsApi)\\n\\t\\t\\t}\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tthrow new Exception(s\\\"Message with unknown event type received. [${eventType}]\\\")\\n\\t\\t}\\n\\t\\t*/\\n\\t} catch {\\n\\t\\tcase e: Exception =>\\n\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] [handleIndividualJObject] ${Json.fromJsonToString(jsonObj)} - $VERSION\\\")\\n\\t\\t\\tprintln(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] [handleIndividualJObject] ${e.getMessage} - $VERSION\\\")\\n\\t\\t\\te.printStackTrace()\\n\\t\\t\\tthrow e\\n\\t}\\n\\n\\t/** Handle bet-log/transaction mapping for client KA events */\\n\\tprivate def handleBetLogEvents(eventType: String, jsonObj: JsonAST.JValue, messageAsString: String, competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tval routingKey  \\t\\t    = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"ROUTING_KEY\\\")\\n\\t\\tval gameProvider  \\t\\t    = Json.getFromJValueAsOption[String]\\t\\t(jsonObj,\\t\\\"GAME_PROVIDER\\\")\\n\\t\\tval routingProvider  \\t\\t= if(gameProvider.nonEmpty && gameProvider.get.nonEmpty){gameProvider.get}else{routingKey.split(\\\"BET_LOG_\\\").lastOption.getOrElse(routingKey)}\\n\\t\\tval seqNo  \\t\\t            = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"SEQ_NO\\\")\\n\\t\\tval childMemberRefId        = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"BET_ID\\\")\\n\\t\\tval betTimestamp\\t        = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"BET_TIMESTAMP\\\")\\n\\t\\tval gameTpeId\\t            = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"GAMETYPE_ID\\\")\\n\\t\\tval gameIdKey  \\t            = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"GAME_ID\\\")\\n\\t\\tval gameId  \\t            = routingProvider + \\\".\\\" + gameIdKey\\n\\t\\tval turnover  \\t            = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"TURNOVER\\\")\\n\\t\\tval netWin        \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"NETWIN\\\")\\n\\t\\tval currency       \\t        = Json.getFromJValue[String]\\t\\t(jsonObj,\\t\\\"CURRENCY\\\")\\n\\t\\tval playerDevice \\t        = Json.getFromJValueAsOption[String]\\t\\t(jsonObj,\\t\\\"PLAYER_DEVICE\\\").getOrElse(\\\"\\\")\\n\\t\\tval beforeBalance  \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"BEFORE_BALANCE\\\")\\n\\t\\tval afterBalance  \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"AFTER_BALANCE\\\")\\n\\t\\tval win           \\t        = Json.getFromJValue[Double]\\t\\t(jsonObj,\\t\\\"WIN\\\")\\n\\t\\tval gameMetadata            = new scala.collection.mutable.HashMap[String, String]()\\n\\t\\tvar gameName                = gameId\\n\\t\\tif(Json.keyExists(jsonObj, \\\"GAME_NAME\\\")){\\n\\t\\t\\tjsonObj.\\\\(\\\"GAME_NAME\\\").mapField{ field =>\\n\\t\\t\\t\\tval label = field._2.extract[String]\\n\\t\\t\\t\\tgameMetadata.put(field._1, label)\\n\\n\\t\\t\\t\\tif(field._1 == \\\"en-US\\\"){\\n\\t\\t\\t\\t\\tgameName = routingProvider + \\\".\\\" + label\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfield\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tval transactionTime = parseShortDateFormat(betTimestamp, competitionLabsApi)\\n\\n\\t\\t// check if member exists as member should have been pre-created using account mapping \\\"ACCOUNTS_MAPPING\\\" registration event\\n//\\t\\tval memberId = Option(\\\"NtASM30B-m1TK8I8_E4D\\\") //getParentMember(childMemberRefId, competitionLabsApi)\\n//\\t\\tif( memberId.nonEmpty ){\\n//\\t\\t\\tval basicMember = competitionLabsApi.getMember(memberId.get).get\\n//\\t\\t\\tval parentMemberRef = basicMember.getMetaData.flatMap(meta => meta.get(parentMemberRefKey))\\n\\n\\t\\t\\t// check if parent member exists as member should have been pre-created using initial account \\\"ACCOUNTS\\\" registration event\\n//\\t\\t\\tif( parentMemberRef.nonEmpty ){\\n\\t\\t\\t\\tval convertedWinAmount = convertToBaseCurrency(currency, win, routingKey.toLowerCase().contains(\\\"rollback\\\"), competitionLabsApi)\\n\\t\\t\\t\\tval convertedNetWinAmount = convertToBaseCurrency(currency, netWin, routingKey.toLowerCase().contains(\\\"rollback\\\"), competitionLabsApi)\\n\\t\\t\\t\\tval convertedTurnoverAmount = convertToBaseCurrency(currency, turnover, routingKey.toLowerCase().contains(\\\"rollback\\\"), competitionLabsApi)\\n\\n\\t\\t\\t\\t// define available custom fields\\n\\t\\t\\t\\tval customFields = Map[String, Seq[Any]](\\n\\t\\t\\t\\t\\tbetAction -> Seq(convertedTurnoverAmount),\\n\\t\\t\\t\\t\\twinAction -> Seq(convertedWinAmount),\\n\\t\\t\\t\\t\\t\\\"netWin\\\" -> Seq(convertedNetWinAmount),\\n\\t\\t\\t\\t\\t\\\"currency\\\" -> Seq(currency),\\n\\t\\t\\t\\t\\t\\\"playerDevice\\\" -> Seq(playerDevice),\\n\\t\\t\\t\\t\\t\\\"gameId\\\" -> Seq(gameId),\\n\\t\\t\\t\\t\\t\\\"beforeBalance\\\" -> Seq(beforeBalance),\\n\\t\\t\\t\\t\\t\\\"afterBalance\\\" -> Seq(afterBalance),\\n\\t\\t\\t\\t\\t\\\"eventType\\\" -> Seq(eventType),\\n\\t\\t\\t\\t\\t\\\"recordDate\\\" -> Seq(DateTime.now().toString)\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tgetOrCreateEventAction(betAction, competitionLabsApi)\\n\\t\\t\\t\\tgetOrCreateEventAction(winAction, competitionLabsApi)\\n\\t\\t\\t\\tgetOrCreateProduct(gameId, gameName, Seq(\\\"KA\\\"), gameTpeId, Option(gameMetadata.toMap), competitionLabsApi) // creation product\\n\\n\\t\\t\\t\\t// bet action event\\n\\t\\t\\t\\tval basicBetEvent = BasicEventModel(\\n\\t\\t\\t\\t\\taction = betAction,\\n\\t\\t\\t\\t\\ttags = Seq.empty,\\n\\t\\t\\t\\t\\teventRefId = seqNo,\\n\\t\\t\\t\\t\\tmemberRefId = childMemberRefId,\\n\\t\\t\\t\\t\\tentityRefId = gameId,\\n\\t\\t\\t\\t\\tbatchId = None,\\n\\t\\t\\t\\t\\tsourceValue = convertedTurnoverAmount,\\n\\t\\t\\t\\t\\tmetadata = customFields.toMap,\\n\\t\\t\\t\\t\\ttransactionTimestamp = transactionTime\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t// win action event\\n\\t\\t\\t\\tval basicWinEvent = BasicEventModel(\\n\\t\\t\\t\\t\\taction = winAction,\\n\\t\\t\\t\\t\\ttags = Seq.empty,\\n\\t\\t\\t\\t\\teventRefId = seqNo,\\n\\t\\t\\t\\t\\tmemberRefId = childMemberRefId,\\n\\t\\t\\t\\t\\tentityRefId = gameId,\\n\\t\\t\\t\\t\\tbatchId = None,\\n\\t\\t\\t\\t\\tsourceValue = convertedWinAmount,\\n\\t\\t\\t\\t\\tmetadata = customFields.toMap,\\n\\t\\t\\t\\t\\ttransactionTimestamp = transactionTime\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t// win_multiplier event if win greater then >0\\n\\t\\t\\t\\tif(convertedWinAmount != 0 && convertedTurnoverAmount != 0) {\\n\\t\\t\\t\\t\\tval winMultiplierValue = convertedWinAmount / convertedTurnoverAmount\\n\\t\\t\\t\\t\\tval basicWinMultiplierEvent = BasicEventModel(\\n\\t\\t\\t\\t\\t\\taction = winMultiplier,\\n\\t\\t\\t\\t\\t\\ttags = Seq.empty,\\n\\t\\t\\t\\t\\t\\teventRefId = seqNo,\\n\\t\\t\\t\\t\\t\\tmemberRefId = childMemberRefId,\\n\\t\\t\\t\\t\\t\\tentityRefId = gameId,\\n\\t\\t\\t\\t\\t\\tbatchId = None,\\n\\t\\t\\t\\t\\t\\tsourceValue = winMultiplierValue,\\n\\t\\t\\t\\t\\t\\tmetadata = customFields.toMap,\\n\\t\\t\\t\\t\\t\\ttransactionTimestamp = transactionTime\\n\\t\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t\\tcompetitionLabsApi.pushEvent(basicWinMultiplierEvent)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcompetitionLabsApi.pushEvent(basicBetEvent)\\n\\t\\t\\t\\tcompetitionLabsApi.pushEvent(basicWinEvent)\\n//\\t\\t\\t}else{\\n//\\t\\t\\t\\t//println(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] Parent Member cannot be found in metadata for member: [${memberId.get}] - $VERSION\\\")\\n//\\t\\t\\t}\\n//\\t\\t}else{\\n//\\t\\t\\t//println(s\\\"${DateTime.now()}[${competitionLabsApi.spaceName}] Member cannot be found for refId: [$childMemberRefId] - $VERSION\\\")\\n//\\t\\t}\\n\\t}\\n\\n\\t// handle action creation inside in action helpers\\n\\tprivate def getOrCreateEventAction(action: String, competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tif(!competitionLabsApi.eventActionExists(action.toLowerCase))\\n\\t\\t\\tcompetitionLabsApi.createEventAction(action.toLowerCase)\\n\\t}\\n\\n\\t/**\\n\\t  * handles member creation\\n\\t  */\\n\\tprivate def getOrCreateMember(memberRef: String, displayName: Option[String], groups: Seq[String], memberMeta: Option[Map[String, String]], onUpdate: => Unit, onMemberGroupUpdate: Seq[String] => Seq[String], onMemberMetadataUpdate: Option[Map[String, String]] => Option[Map[String, String]], competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tcompetitionLabsApi.memberIdFromMemberRefId(memberRef) match {\\n\\t\\t\\tcase Some(mId) =>\\n\\t\\t\\t\\tonUpdate\\n\\n\\t\\t\\t\\tval member = competitionLabsApi.getMember(mId).get\\n\\n\\t\\t\\t\\t// group update\\n\\t\\t\\t\\tval gToSet = member.getGroups match {\\n\\t\\t\\t\\t\\tcase Some(g) =>\\n\\t\\t\\t\\t\\t\\tonMemberGroupUpdate(g)\\n\\t\\t\\t\\t\\tcase _ =>\\n\\t\\t\\t\\t\\t\\tgroups\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// metadata update\\n\\t\\t\\t\\tval updateMetadata = member.getMetaData match {\\n\\t\\t\\t\\t\\tcase Some(m) =>\\n\\t\\t\\t\\t\\t\\tonMemberMetadataUpdate(Option(m))\\n\\t\\t\\t\\t\\tcase _ =>\\n\\t\\t\\t\\t\\t\\tmemberMeta\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// update member object\\n\\t\\t\\t\\tval displayNameUpdate: String = displayName.getOrElse(member.getDisplayName.getOrElse(\\\"\\\"))\\n\\t\\t\\t\\tcompetitionLabsApi.updateMember(mId, Option(memberRef), Option(displayNameUpdate), Option(gToSet.toArray.distinct), updateMetadata)\\n\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tcompetitionLabsApi.createMember(memberRef, displayName.getOrElse(memberRef), groups.distinct, memberMeta)\\n\\t\\t}\\n\\t}\\n\\n\\t// get member CL ID from reference ID\\n\\tprivate def getParentMember(memberRef: String, competitionLabsApi: ZiqniApi): Option[String] = competitionLabsApi.memberIdFromMemberRefId(memberRef)\\n\\n\\t// handle product creation\\n\\tprivate def getOrCreateProduct(productReferenceId: String, displayName: String, providers: Seq[String], productType: String, metaData: Option[Map[String, String]], competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tcompetitionLabsApi.productIdFromProductRefId(productReferenceId) match {\\n\\t\\t\\tcase Some(pId) =>\\n\\t\\t\\t//else do nothing\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tcompetitionLabsApi.createProduct(productReferenceId, displayName, providers, productType, 1, metaData)\\n\\t\\t}\\n\\t}\\n\\n\\t// handle product creation\\n\\tprivate def updateOrCreateProduct(productReferenceId: String, displayName: String, providers: Seq[String], productType: String, metaData: Option[Map[String, String]], competitionLabsApi: ZiqniApi): Unit = {\\n\\t\\tcompetitionLabsApi.productIdFromProductRefId(productReferenceId) match {\\n\\t\\t\\tcase Some(pId) =>\\n\\t\\t\\t\\tcompetitionLabsApi.getProduct(pId).map{ product =>\\n\\t\\t\\t\\t\\tif(product.getName != displayName && displayName.trim.nonEmpty){\\n\\t\\t\\t\\t\\t\\tcompetitionLabsApi.updateProduct(\\n\\t\\t\\t\\t\\t\\t\\tclProductId = product.getClProductId,\\n\\t\\t\\t\\t\\t\\t\\tproductReferenceId = Option(product.getProductReferenceId),\\n\\t\\t\\t\\t\\t\\t\\tdisplayName = Option(displayName),\\n\\t\\t\\t\\t\\t\\t\\tproviders = Option(product.getProviders),\\n\\t\\t\\t\\t\\t\\t\\tproductType = Option(product.getProductType),\\n\\t\\t\\t\\t\\t\\t\\tdefaultAdjustmentFactor = product.getDefaultAdjustmentFactor,\\n\\t\\t\\t\\t\\t\\t\\tmetaData = product.getMetaData\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\tcase _ =>\\n\\t\\t\\t\\tcompetitionLabsApi.createProduct(productReferenceId, displayName, providers, productType, 1, metaData)\\n\\t\\t}\\n\\t}\\n\\n\\t// Normalize currency converstions based on account settings\\n\\tprivate def convertToBaseCurrency(currency: String, sourceValue: Double, rollBack: Boolean, competitionLabsApi: ZiqniApi): Double = {\\n\\t\\tval currencyMultiplier = competitionLabsApi.getUoMMultiplierFromKey(currency).getOrElse(1.0)\\n\\t\\tval convertedValue = sourceValue / currencyMultiplier\\n\\t\\tif(rollBack && convertedValue != 0){\\n\\t\\t\\tconvertedValue * (-1)\\n\\t\\t}else\\n\\t\\t\\tconvertedValue\\n\\t}\\n}\\n\\n\",\"sourceLanguage\":\"Scala\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/transformers",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"transformers"
							]
						},
						"description": "Create a new Transformer in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get transformers",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/transformers?id={{transformerId0}},{{transformerId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"transformers"
							],
							"query": [
								{
									"key": "id",
									"value": "{{transformerId0}},{{transformerId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Transformers. This assumes that transformers have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update transformers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"transformerName\".concat([i]), requestJson[i].name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\":\"{{transformerId0}}\",\n        \"name\":\"Test_update_name_0\",\n        \"source\":null,\n        \"sourceLanguage\":null\n        },\n    {\n        \"id\":\"{{transformerId1}}\",\n        \"name\":\"Test_update_name_1\",\n        \"source\":null,\n        \"sourceLanguage\":null\n        }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/transformers",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"transformers"
							]
						},
						"description": "Update an existing Transformer in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get transformers by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{transformerName0}}\"\n            ]\n        }],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/transformers/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"transformers",
								"query"
							]
						},
						"description": "Retrieve a Transformer or a list of Transformers from Ziqni by unique Transformer ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete transformers",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/transformers?id={{transformerId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"transformers"
							],
							"query": [
								{
									"key": "id",
									"value": "{{transformerId0}}"
								}
							]
						},
						"description": "Delete the Transformers for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete transformers by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{transformerName1}}\"\n            ]\n        }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/transformers/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"transformers",
								"delete"
							]
						},
						"description": "Delete a Transformer or a list of Transformers from Ziqni by unique Transformer ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "translations",
			"item": [
				{
					"name": "Creating a translation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"translationEntityId\".concat([i]), requestJson[i].entityId);",
									"    // set the action type key",
									"    pm.collectionVariables.set(\"languageKey\".concat([i]), requestJson[i].languageKey);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the action type id",
									"    pm.collectionVariables.set(\"translationId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n     {\n    \"entityId\": \"8Xb6q38BF3T0PydbrmYm\",\n    \"entityType\": \"Achievement\",\n    \"translations\": [{\n        \"fieldName\": \"name\",\n        \"text\": \"text\"\n    }],\n    \"languageId\": \"wXb6q38BF3T0PydbimQh\",\n    \"languageKey\": \"csb\"\n},\n{\n    \"entityId\": \"8Xb6q38BF3T0PydbrmYm\",\n    \"entityType\": \"Achievement\",\n    \"translations\": [{\n        \"fieldName\": \"name\",\n        \"text\": \"text\"\n    }],\n    \"languageId\": \"wXb6q38BF3T0PydbimQh\",\n    \"languageKey\": \"fit\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations"
							]
						},
						"description": "Create a new Translation in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get translations",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations?id={{translationId0}},{{translationId1}},dw17u38B8hmO8lJYaeJZ&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations"
							],
							"query": [
								{
									"key": "id",
									"value": "{{translationId0}},{{translationId1}},dw17u38B8hmO8lJYaeJZ",
									"description": "The unique identifiers of the resources"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of translations. This assumes that rules have first been created during achievement, competition or contest setup. The id is the ID of the entity the translations describe"
					},
					"response": []
				},
				{
					"name": "Update translations",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{translationId0}}\",\n        \"languageKey\":\"den\",\n        \"translations\": [{\n            \"fieldName\": \"name\",\n            \"text\": \"Given\"\n        }]\n    },\n    {\n        \"id\": \"{{translationId1}}\",\n        \"languageKey\":\"ebu\",\n        \"translations\": [\n            {\n            \"fieldName\": \"name\",\n            \"text\": \"John\"\n        },\n            {\n            \"fieldName\": \"description\",\n            \"text\": \"Joseph\"\n        }]\n    },\n    {\n        \"id\": \"\",\n        \"entityId\": \"8Xb6q38BF3T0PydbrmYm\",\n        \"entityType\": \"Achievement\",\n        \"languageKey\":\"ebu\",\n        \"translations\": [\n            {\n            \"fieldName\": \"name\",\n            \"text\": \"new Ben\"\n        },\n            {\n            \"fieldName\": \"description\",\n            \"text\": \"Ben created at update\"\n        }]\n    }\n    \n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations"
							]
						},
						"description": "Update existing translations"
					},
					"response": []
				},
				{
					"name": "Get translations by entity id",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations/find-by-entity-id?refIds={{translationEntityId0}},{{translationEntityId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations",
								"find-by-entity-id"
							],
							"query": [
								{
									"key": "refIds",
									"value": "{{translationEntityId0}},{{translationEntityId1}}",
									"description": "The reference ids  of the resources"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Translations. This assumes that translations have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Get translations by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"entityId\",\n            \"queryValues\": [\n                \"{{translationEntityId0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations",
								"query"
							]
						},
						"description": "Retrieve a Translation or a list of Translations from Ziqni by unique Translation ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete translations",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations?id={{translationId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations"
							],
							"query": [
								{
									"key": "id",
									"value": "{{translationId0}}"
								}
							]
						},
						"description": "Delete the Translations for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete translations by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"entityId\",\n            \"queryValues\": [\n                \"{{translationEntityId0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/translations/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"translations",
								"delete"
							]
						},
						"description": "Delete a Translation or a list of Translations from Ziqni by unique Translation ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "units-of-measure",
			"item": [
				{
					"name": "Create units of measure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// get the length of request body",
									"var requestLength = requestJson.length;",
									"for (i = 0; i < requestLength; i++) {",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"unitOfMeasureName\".concat([i]), requestJson[i].name);",
									"    // set the product reference id",
									"    pm.collectionVariables.set(\"unitOfMeasureKey\".concat([i]), requestJson[i].key);",
									"}",
									"",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"unitOfMeasureId\".concat([i]), responseJson.results[i].id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"MetaKey\": \"MetaValue\"\n            },\n        \"name\": \"Test_name-23662265-c15f-43e4-8ddd-5e5275a47bd0\",\n        \"key\": \"Test_key-aa7e9073-1d88-4119-857a-ff962ff42e0d50\",\n        \"description\": \"Test description\",\n        \"isoCode\": null,\n        \"symbol\": null,\n        \"multiplier\": 0.3594221543971534,\n        \"unitOfMeasureType\": \"Other\"\n},\n{\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"MetaKey\": \"MetaValue\"\n            },\n        \"name\": \"Test_name-23662265-c15f-43e4-8ddd-5e5275a47bd0\",\n        \"key\": \"Test_key-aa7e9073-1d88-4119-857a-ff962ff42e0d60\",\n        \"description\": \"Test description\",\n        \"isoCode\": null,\n        \"symbol\": null,\n        \"multiplier\": 0.3594221543971534,\n        \"unitOfMeasureType\": \"Other\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/units-of-measure",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"units-of-measure"
							]
						},
						"description": "Create a new Unit of measure in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get units of measure",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/units-of-measure?id={{unitOfMeasureId0}},{{unitOfMeasureId1}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"units-of-measure"
							],
							"query": [
								{
									"key": "id",
									"value": "{{unitOfMeasureId0}},{{unitOfMeasureId1}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Units of measure. This assumes that units of measure have first been uploaded via a POST request or web console"
					},
					"response": []
				},
				{
					"name": "Update units of measure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"// set the name variable",
									"pm.collectionVariables.set(\"unitOfMeasureName0\", requestJson[0].name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{unitOfMeasureId0}}\",\n        \"customFields\": null,\n        \"tags\": null,\n        \"metadata\": {\n            \"MetaKey\": \"MetaValue\"\n            },\n        \"name\": \"Test_name-23662265-c15f-43e4-8ddd-5e5275a47bd0\",\n        \"description\": \"Updated Test description\",\n        \"isoCode\": null,\n        \"symbol\": null,\n        \"multiplier\": 0.3594221543971534,\n        \"unitOfMeasureType\": \"Other\"\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/units-of-measure",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"units-of-measure"
							]
						},
						"description": "Create a new Unit of measure in the Ziqni database"
					},
					"response": []
				},
				{
					"name": "Get units of measure by query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{unitOfMeasureKey0}}\"\n            ]\n        }\n    ],\n    \"hasNoValue\": [\n        \"tags\"\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/units-of-measure/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"units-of-measure",
								"query"
							]
						},
						"description": "Retrieve Units of measure from Ziqni database by unique Unit of measure ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete units of measure",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/units-of-measure?id={{unitOfMeasureId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"units-of-measure"
							],
							"query": [
								{
									"key": "id",
									"value": "{{unitOfMeasureId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}"
								}
							]
						},
						"description": "Delete the Unit of measured for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete units of measure by query",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "clientId",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "{{ziqniAdminApiAuthUrl}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{ziqniAdminApiAccessTokenUrl}}",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{ziqniAdminApiClientId}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "{{ziqniAdminApiTokenName}}",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"key\",\n            \"queryValues\": [\n                \"{{unitOfMeasureKey1}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/units-of-measure/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"units-of-measure",
								"delete"
							]
						},
						"description": "Delete Units of measure from Ziqni database by unique Unit of measure ID's or any other POST body parameters using the POST method"
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "inbox",
					"item": [
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/user/inbox?_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"user",
										"inbox"
									],
									"query": [
										{
											"key": "_limit",
											"value": "{{ziqniDefaultLimit}}",
											"description": "Limit the returned total records found"
										},
										{
											"key": "_skip",
											"value": "{{ziqniDefaultSkip}}",
											"description": "Skip the returned records found and return the next batch of records"
										}
									]
								},
								"description": "Returns a list of the Users messages"
							},
							"response": []
						},
						{
							"name": "NOT AVAILABLE IN CURRENT RELEASE",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ziqniAdminApiBaseUrl}}/user/inbox/:id",
									"host": [
										"{{ziqniAdminApiBaseUrl}}"
									],
									"path": [
										"user",
										"inbox",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "repr",
											"description": "(Required) Unique identifier of the resource"
										}
									]
								},
								"description": "Returns a Users message for the identifier provided"
							},
							"response": []
						}
					]
				},
				{
					"name": "get User",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/user?includeSpaces=true",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "includeSpaces",
									"value": "true",
									"description": "Include Spaces"
								}
							]
						},
						"description": "Returns the current users user. This assumes that a user has first been uploaded via a POST request or web console"
					},
					"response": []
				}
			]
		},
		{
			"name": "webhooks",
			"item": [
				{
					"name": "Create webhooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse request",
									"var requestJson = JSON.parse(request.data);",
									"",
									"    // set the name variable",
									"    pm.collectionVariables.set(\"webhookName0\", requestJson.name);",
									"",
									"// parse response",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"// get the length of results",
									"var responseLength = responseJson.results.length;",
									"for (i = 0; i < responseLength; i++) {",
									"    // set the product id",
									"    pm.collectionVariables.set(\"webhookId\".concat([i]), responseJson.results[i].id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": {\n        \"1247a26c-0a3d-4c1d-9b79-fce1b18540ee\":\"027a3a1c-a3e9-423c-9480-485e711906ed\"\n        },\n    \"postToUrl\": \"http://www.example.com\",\n    \"triggers\": [\"ET-101\", \"ET-201\"],\n    \"description\": \"Test Description\",\n    \"name\": \"Test Webhook Name\",\n    \"headers\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks"
							]
						},
						"description": "Create a new Webhook in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get webhooks",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks?id={{webhookId0}}&_limit={{ziqniDefaultLimit}}&_skip={{ziqniDefaultSkip}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks"
							],
							"query": [
								{
									"key": "id",
									"value": "{{webhookId0}}"
								},
								{
									"key": "_limit",
									"value": "{{ziqniDefaultLimit}}",
									"description": "Limit the returned total records found"
								},
								{
									"key": "_skip",
									"value": "{{ziqniDefaultSkip}}",
									"description": "Skip the returned records found and return the next batch of records"
								}
							]
						},
						"description": "Returns a list of Webhooks."
					},
					"response": []
				},
				{
					"name": "Update webhooks",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{webhookId0}}\",\n    \"customFields\": null,\n    \"tags\": null,\n    \"metadata\": null,\n    \"postToUrl\": null,\n    \"triggers\": null,\n    \"description\": \"Test_update_description\",\n    \"name\": null,\n    \"headers\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks"
							]
						},
						"description": "Update an existing Webhook in the Ziqni system"
					},
					"response": []
				},
				{
					"name": "Get webhooks by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{webhookName0}}\"\n            ]\n        }\n    ],\n    \"skip\": 0,\n    \"limit\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks/query",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks",
								"query"
							]
						},
						"description": "Retrieve a Webhook or a list of Webhooks from Ziqni by unique Webhook ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Delete webhooks",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks?id={{webhookId0}}",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks"
							],
							"query": [
								{
									"key": "id",
									"value": "{{webhookId0}}"
								}
							]
						},
						"description": "Delete the Webhooks for a given identifier specified"
					},
					"response": []
				},
				{
					"name": "Delete webhooks by query",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"must\": [\n        {\n            \"queryField\": \"name\",\n            \"queryValues\": [\n                \"{{webhookName0}}\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks/delete",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks",
								"delete"
							]
						},
						"description": "Delete a Webhook or a list of Webhooks from Ziqni by unique Webhook ID's or any other POST body parameters using the POST method"
					},
					"response": []
				},
				{
					"name": "Get webhooks triggers",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks/triggers",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks",
								"triggers"
							]
						},
						"description": "Returns a list of all avilable Webhooks triggers"
					},
					"response": []
				},
				{
					"name": "NOT AVAILABLE IN CURRENT RELEASE",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"status\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ziqniAdminApiBaseUrl}}/webhooks/state",
							"host": [
								"{{ziqniAdminApiBaseUrl}}"
							],
							"path": [
								"webhooks",
								"state"
							]
						},
						"description": "Update the state of a Wbhook using the POST method"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "clientId",
				"value": "{{ziqniAdminApiClientId}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{ziqniAdminApiAccessTokenUrl}}",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{ziqniAdminApiAuthUrl}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://{{ziqniAdminApiClientId}}",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "{{ziqniAdminApiTokenName}}",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "openid",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productName0",
			"value": ""
		},
		{
			"key": "productRefId0",
			"value": ""
		},
		{
			"key": "productName1",
			"value": ""
		},
		{
			"key": "productRefId1",
			"value": ""
		},
		{
			"key": "productId0",
			"value": ""
		},
		{
			"key": "productId1",
			"value": ""
		},
		{
			"key": "actionTypeName0",
			"value": ""
		},
		{
			"key": "actionTypeKey0",
			"value": ""
		},
		{
			"key": "actionTypeName1",
			"value": ""
		},
		{
			"key": "actionTypeKey1",
			"value": ""
		},
		{
			"key": "actionTypeId0",
			"value": ""
		},
		{
			"key": "actionTypeId1",
			"value": ""
		},
		{
			"key": "memberName0",
			"value": ""
		},
		{
			"key": "memberRefId0",
			"value": ""
		},
		{
			"key": "memberName1",
			"value": ""
		},
		{
			"key": "memberRefId1",
			"value": ""
		},
		{
			"key": "memberId0",
			"value": ""
		},
		{
			"key": "memberId1",
			"value": ""
		},
		{
			"key": "apiKeyId0",
			"value": ""
		},
		{
			"key": "customFieldName0",
			"value": ""
		},
		{
			"key": "customFieldKey0",
			"value": ""
		},
		{
			"key": "customFieldName1",
			"value": ""
		},
		{
			"key": "customFieldKey1",
			"value": ""
		},
		{
			"key": "customFieldId0",
			"value": ""
		},
		{
			"key": "apiKeyDescription0",
			"value": ""
		},
		{
			"key": "customFieldId1",
			"value": ""
		},
		{
			"key": "unitOfMeasureName0",
			"value": ""
		},
		{
			"key": "unitOfMeasureKey0",
			"value": ""
		},
		{
			"key": "unitOfMeasureName1",
			"value": ""
		},
		{
			"key": "unitOfMeasureKey1",
			"value": ""
		},
		{
			"key": "unitOfMeasureId0",
			"value": ""
		},
		{
			"key": "unitOfMeasureId1",
			"value": ""
		},
		{
			"key": "languageKey0",
			"value": ""
		},
		{
			"key": "languageKey1",
			"value": ""
		},
		{
			"key": "languageId0",
			"value": ""
		},
		{
			"key": "languageId1",
			"value": ""
		},
		{
			"key": "tagName0",
			"value": ""
		},
		{
			"key": "tagKey0",
			"value": ""
		},
		{
			"key": "tagName1",
			"value": ""
		},
		{
			"key": "tagKey1",
			"value": ""
		},
		{
			"key": "tagId0",
			"value": ""
		},
		{
			"key": "tagId1",
			"value": ""
		},
		{
			"key": "translationEntityId0",
			"value": ""
		},
		{
			"key": "translationEntityId1",
			"value": ""
		},
		{
			"key": "translationId0",
			"value": ""
		},
		{
			"key": "translationId1",
			"value": ""
		},
		{
			"key": "rewardName0",
			"value": ""
		},
		{
			"key": "rewardEntityId0",
			"value": ""
		},
		{
			"key": "rewardName1",
			"value": ""
		},
		{
			"key": "rewardEntityId1",
			"value": ""
		},
		{
			"key": "rewardId0",
			"value": ""
		},
		{
			"key": "rewardId1",
			"value": ""
		},
		{
			"key": "repositoryName0",
			"value": ""
		},
		{
			"key": "repositoryName1",
			"value": ""
		},
		{
			"key": "repositoryId0",
			"value": ""
		},
		{
			"key": "repositoryId1",
			"value": ""
		},
		{
			"key": "webhookId0",
			"value": ""
		},
		{
			"key": "webhookName0",
			"value": ""
		},
		{
			"key": "CompetitionName0",
			"value": ""
		},
		{
			"key": "competitionId0",
			"value": ""
		},
		{
			"key": "competitionName0",
			"value": ""
		},
		{
			"key": "collaboratorEmail0",
			"value": ""
		},
		{
			"key": "collaboratorId0",
			"value": ""
		},
		{
			"key": "transformerName0",
			"value": ""
		},
		{
			"key": "transformerName1",
			"value": ""
		},
		{
			"key": "transformerId0",
			"value": ""
		},
		{
			"key": "transformerId1",
			"value": ""
		},
		{
			"key": "eventMemberRefId0",
			"value": ""
		},
		{
			"key": "eventMemberRefId1",
			"value": ""
		},
		{
			"key": "eventId0",
			"value": ""
		},
		{
			"key": "eventId1",
			"value": ""
		},
		{
			"key": "eventAction0",
			"value": ""
		},
		{
			"key": "eventAction1",
			"value": ""
		},
		{
			"key": "ruleId0",
			"value": ""
		},
		{
			"key": "ruleId1",
			"value": ""
		},
		{
			"key": "achievementName0",
			"value": ""
		},
		{
			"key": "achievementId0",
			"value": ""
		},
		{
			"key": "achievementName1",
			"value": ""
		},
		{
			"key": "achievementId1",
			"value": ""
		},
		{
			"key": "contestName0",
			"value": ""
		},
		{
			"key": "contestId0",
			"value": ""
		},
		{
			"key": "sqsConnectionName0",
			"value": ""
		},
		{
			"key": "sqsConnectionId0",
			"value": ""
		},
		{
			"key": "rabbitMqConnectionName0",
			"value": ""
		},
		{
			"key": "rabbitMqConnectionId0",
			"value": ""
		},
		{
			"key": "kafkaConnectionName0",
			"value": ""
		},
		{
			"key": "kafkaConnectionId0",
			"value": ""
		},
		{
			"key": "accountMessageId0",
			"value": "",
			"type": "string"
		},
		{
			"key": "awardId0",
			"value": "",
			"type": "string"
		},
		{
			"key": "memberMessageSubject0",
			"value": ""
		},
		{
			"key": "memberMessageSubject1",
			"value": ""
		},
		{
			"key": "memberMessageId0",
			"value": ""
		},
		{
			"key": "memberMessageId1",
			"value": ""
		},
		{
			"key": "notificationSubject0",
			"value": ""
		},
		{
			"key": "notificationSubject1",
			"value": ""
		},
		{
			"key": "notificationId0",
			"value": ""
		},
		{
			"key": "notificationId1",
			"value": ""
		},
		{
			"key": "notificationMessageType0",
			"value": ""
		},
		{
			"key": "notificationMessageType1",
			"value": ""
		},
		{
			"key": "memberMessageMessageType0",
			"value": ""
		},
		{
			"key": "memberMessageMessageType1",
			"value": ""
		},
		{
			"key": "fileName0",
			"value": ""
		},
		{
			"key": "fileRepositoryId0",
			"value": ""
		},
		{
			"key": "fileId0",
			"value": ""
		},
		{
			"key": "externalReference0",
			"value": ""
		},
		{
			"key": "computeEngineName0",
			"value": ""
		},
		{
			"key": "computeEngineDescription0",
			"value": ""
		},
		{
			"key": "computeEngineId0",
			"value": ""
		},
		{
			"key": "fileUploadExternalReference0",
			"value": ""
		}
	]
}